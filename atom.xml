<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yremp</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-09-08T16:06:01.084Z</updated>
  <id>/</id>
  
  <author>
    <name>yremp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最近搭了一个图床</title>
    <link href="/2019/08/12/images/"/>
    <id>/2019/08/12/images/</id>
    <published>2019-08-12T02:16:01.000Z</published>
    <updated>2019-09-08T16:06:01.084Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:list {"ordered":true} --><ol><li> 最近搭了一个图床，欢迎大家使用</li><li>这是一个基于免费版的<a href="https://github.com/Chevereto" target="_blank" rel="noopener">Chevereto</a>搭建的图床，有兴趣的可以直接去看<strong><a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="noopener">Chevereto-Free</a></strong>，不建议大家使用  Chevereto的破解版，风险比较大。免费版已经很强大了，大部分功能都能正常使用。 </li></ol><!-- /wp:list --><!-- wp:paragraph --><p> <a href="https://www.yremp.live" target="_blank" rel="noopener">图床地址</a>：https://www.yremp.live</p><!-- /wp:paragraph --><!-- wp:paragraph {"align":"left"} --><p style="text-align:left">    图床对我们写博客解决插图是有很大帮组的，之前玩hexo时图片放github加载速度是比较慢的，后来使用jsdelivr加速会好一点，但是还是不够理想。所以很长一段时间我都在思考，如何搭建一个自己的图床，后来无意间发现了 <strong><a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="noopener">Chevereto-Free</a></strong> ，发现这个程序很适合我，于是去网上找了很多教程，花费了一天时间把网站重构了一下，顺利搭建了我的图床。</p><!-- /wp:paragraph --><p><img src="https://www.yremp.live/images/2019/08/12/VioletEvergardenc19ea.md.jpg" alt>]</p><!-- wp:gallery --><ul class="wp-block-gallery columns-0 is-cropped"></ul><!-- /wp:gallery -->]]></content>
    
    <summary type="html">
    
      最近搭建了一个图床，图床地址：https://www.yremp.live ,欢迎大家使用。
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 社区项目</title>
    <link href="/2019/08/06/spring-boot-community/"/>
    <id>/2019/08/06/spring-boot-community/</id>
    <published>2019-08-06T10:16:01.000Z</published>
    <updated>2019-09-08T15:58:00.313Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:heading {"level":3} --><h3 id="1-图片预览："><a href="#1-图片预览：" class="headerlink" title="1.图片预览："></a>1.图片预览：</h3><h4 id="1-主页"><a href="#1-主页" class="headerlink" title="1.主页"></a>1.主页</h4><p><img src="http://yremp.hk.ufileos.com/38ae6d89-5de4-44c3-8ee9-703c962432cd.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=q2oyg%2BotvDmb6IjT3NR%2F72XuH68%3D&Expires=1880288397" alt></p><h4 id="2-帖子详情"><a href="#2-帖子详情" class="headerlink" title="2.帖子详情"></a>2.帖子详情</h4><p><img src="http://yremp.hk.ufileos.com/bdf1cbab-1be6-4dfc-af2f-ff57064b0199.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=azCuVUGOxEUj3%2FZ4sEAZcfr1hg0%3D&Expires=1880288722" alt></p><h4 id="3-回复和评论"><a href="#3-回复和评论" class="headerlink" title="3.回复和评论"></a>3.回复和评论</h4><p><img src="http://yremp.hk.ufileos.com/75665e02-252f-4295-82da-a174d5430fc3.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=G2FIXPULPGAef0EzgYTJTMkBzac%3D&Expires=1880288840" alt></p><h4 id="4-个人资料"><a href="#4-个人资料" class="headerlink" title="4.个人资料"></a>4.个人资料</h4><p><img src="http://yremp.hk.ufileos.com/9f34b6fc-6280-4f06-b532-811fddcf8af1.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=0McqMH40VePPvAzurjIBcDszH9U%3D&Expires=1880288973" alt><br><img src="http://yremp.hk.ufileos.com/1887c95d-f645-46df-97b2-53166a3a6cf4.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=AFayW12hx1W7kjiY09EIv3fOa6M%3D&Expires=1880288990" alt><br><img src="http://yremp.hk.ufileos.com/1dbff5ae-f910-4234-b3c9-01ec481b1522.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=WemP%2FVVBLhBJkkKjlDlTT4E3t5s%3D&Expires=1880289014" alt><br><img src="http://yremp.hk.ufileos.com/2bb452c7-ee07-4b69-aad7-8fbb28994e07.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=LOcBj1T8uT%2FXdFMWQC2MzAmGFU8%3D&Expires=1880289025" alt></p><h4 id="公共资料面板"><a href="#公共资料面板" class="headerlink" title="公共资料面板"></a>公共资料面板</h4><p><img src="http://yremp.hk.ufileos.com/6198ce14-398e-4e63-bfc8-5606806fc1f1.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=9oZv9wbnJ6mDiIhBk1AY06v0DHs%3D&Expires=1880289942" alt></p><h4 id="个人资料的前端页面还有很大修改的空间"><a href="#个人资料的前端页面还有很大修改的空间" class="headerlink" title="个人资料的前端页面还有很大修改的空间"></a>个人资料的前端页面还有很大修改的空间</h4><h3>2.项目地址：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>话不多说，先给出项目地址。</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li><a href="https://github.com/yremp/community" target="_blank" rel="noopener">Github 地址</a></li><li><a href="http://www.yremp.live:1234/" target="_blank" rel="noopener">在线预览地址</a></li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>3.项目核心：</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>接入github，使用户可以直接使用github账号登录。</li><li>集成<a href="https://github.com/yremp/editormd" target="_blank" rel="noopener">editormd</a>插件，实现markdown语法编辑并显示为html。</li><li>在editormd中使用ucloud上传图片。</li><li>数据库查询分页。</li><li>使用ajax提交请求，实现二级评论的加载。</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>4.核心代码</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>1.Github登录相关</h4><!-- /wp:heading --><!-- wp:paragraph --><p>1.编写AccessTokenDTO.class 用于github access_token</p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">    private String client_id;    private String client_secret;    private String code;    private String redirect_uri;    private String state;    public String getClient_id() {        return client_id;    }    public void setClient_id(String client_id) {        this.client_id = client_id;    }    public String getClient_secret() {        return client_secret;    }    public void setClient_secret(String client_secret) {        this.client_secret = client_secret;    }    public String getCode() {        return code;    }    public void setCode(String code) {        this.code = code;    }    public String getRedirect_uri() {        return redirect_uri;    }    public void setRedirect_uri(String redirect_uri) {        this.redirect_uri = redirect_uri;    }    public String getState() {        return state;    }    public void setState(String state) {        this.state = state;    }}</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>2.编写GithubProvider.class:调用github官方给出的 OAuth Apps api，实现Github登录 </p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">@Componentpublic class GithubProvider {    public String getAccessToken(AccessTokenDTO accessTokenDto){        MediaType mediaType                = MediaType.get(&quot;application/json; charset=utf-8&quot;);        OkHttpClient client = new OkHttpClient();            RequestBody body = RequestBody.create(mediaType,JSON.toJSONString(accessTokenDto));            Request request = new Request.Builder()                    .url(&quot;https://github.com/login/oauth/access_token&quot;)                    .post(body)                    .build();            try (Response response = client.newCall(request).execute()) {               String string =response.body().string();               String access_token=string.split(&quot;&amp;amp;&quot;)[0].split(&quot;=&quot;)[1];                return access_token;            }catch (Exception e)            {                e.printStackTrace();            }        return null;    }    public GithubUserDTO getGithubUser(String accessToken) {        OkHttpClient client = new OkHttpClient();        Request request = new Request.Builder()                .url(&quot;https://api.github.com/user?access_token=&quot; + accessToken)                .build();        try {            Response response = client.newCall(request).execute();            String string = response.body().string();            GithubUserDTO githubUserDTO = JSON.parseObject(string, GithubUserDTO.class);            return githubUserDTO;        } catch (IOException e) {            return null;        }    }      }</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>Controller中调用GithubProvider获取用户数据并写入数据库</p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">@Controllerpublic class AuthorizeController {    @Autowired    private GithubProvider githubProvider = null;    @Autowired    private UserService userService = null;    @Value(&quot;${github.client.id}&quot;)    private String clientID;    @Value(&quot;${github.client.secret}&quot;)    private String clientSC;    @Value(&quot;${github.redirect.url}&quot;)    private String redirectURL;    @Autowired    QuesDtoService quesDtoService;    @RequestMapping(&quot;/callback&quot;)    public String callback(@RequestParam(name = &quot;code&quot;) String code,                           @RequestParam(name = &quot;state&quot;) String state,                           HttpServletResponse response,                           HttpServletRequest request) {        AccessTokenDTO accessTokenDto = new AccessTokenDTO();        accessTokenDto.setCode(code);        accessTokenDto.setState(state);        accessTokenDto.setClient_id(clientID);        accessTokenDto.setClient_secret(clientSC);        accessTokenDto.setRedirect_uri(redirectURL);        String accesstaken = githubProvider.getAccessToken(accessTokenDto);        GithubUserDTO githubUserDTO = githubProvider.getGithubUser(accesstaken);        if (githubUserDTO != null) {            User user1 = null;            String token = UUID.randomUUID().toString();            try {                user1 = userService.findByGithubId(String.valueOf(githubUserDTO.getId()));                if (user1 != null) {                    response.addCookie(new Cookie(&quot;token&quot;, token));                    user1.setUser_token(token);                    userService.upTokenById(token, user1.getUser_id());                } else {                    User user = new User();                    user.setUser_token(token);                    user.setUser_name(githubUserDTO.getName());                    user.setAccount_id(String.valueOf(githubUserDTO.getId()));                    user.setGmt_create(System.currentTimeMillis());                    user.setGmt_modified(user.getGmt_create());                    user.setUser_img(githubUserDTO.getAvatarUrl());                    user.setUser_bio(githubUserDTO.getBio());                    user.setUser_blog(githubUserDTO.getBlog());                    user.setUser_github(githubUserDTO.getHtml_url());                    userService.Insert(user);                    request.getSession().setAttribute(&quot;user&quot;, user);                    response.addCookie(new Cookie(&quot;token&quot;, token));                }            } catch (Exception w) {            }            return &quot;redirect:/&quot;;        } else {            return &quot;redirect:/&quot;;        }    }</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>2.Ucloud  <strong>对象存储 UFile</strong> </h4><!-- /wp:heading --><!-- wp:paragraph --><p> 1.UcloudProvider.class:</p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">//ucloud上传文件@Servicepublic class UcloudProvider {    private String buckname = &quot;yremp&quot;;    @Value(&quot;${ucloud.publickey}&quot;)    private String publickey;    @Value(&quot;${ucloud.privatekey}&quot;)    private String privatekey;    public String upload(InputStream fileStream, String mimeType, String filename) {        String fileName;        String[] FilleName = filename.split(&quot;\\.&quot;);        if (FilleName.length &gt; 1) {            fileName = UUID.randomUUID().toString() + &quot;.&quot; + FilleName[FilleName.length - 1];        } else {            return null;        }        try {            //    授权            ObjectAuthorization OBJECT_AUTHORIZER = new UfileObjectLocalAuthorization(publickey, privatekey);            //    配置            ObjectConfig config = new ObjectConfig(&quot;hk&quot;, &quot;ufileos.com&quot;);            PutObjectResultBean response = UfileClient.object(OBJECT_AUTHORIZER, config)                    .putObject(fileStream, mimeType)                    .nameAs(fileName)                    .toBucket(buckname)                    .setOnProgressListener(new OnProgressListener() {                        @Override                        public void onProgress(long bytesWritten, long contentLength) {                        }                    })                    .execute();            if (response != null &amp;amp;&amp;amp; response.getRetCode() == 0) {                String url = UfileClient.object(OBJECT_AUTHORIZER, config)                        .getDownloadUrlFromPrivateBucket(fileName, buckname, 24 * 60 * 60 * 365 *10)                        .createUrl();                return url;            } else {                throw new PeculiarException(PeculiarExceptionCodeAndMessage.FILE_UPLOAD_ERROR);            }        } catch (UfileClientException e) {            throw new PeculiarException(PeculiarExceptionCodeAndMessage.FILE_UPLOAD_ERROR);        } catch (UfileServerException e) {            throw new PeculiarException(PeculiarExceptionCodeAndMessage.FILE_UPLOAD_ERROR);        }    }}</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>2.前端请求后调用UcloudProvider</p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">@Controllerpublic class FileUploadController {    private String fileurl;    @Autowired    private UcloudProvider ucloudProvider;    @RequestMapping(&quot;/file/upload&quot;)    @ResponseBody    public FileDTO upload(HttpServletRequest request){        MultipartHttpServletRequest multipartHttpServletRequest=(MultipartHttpServletRequest) request;        MultipartFile file = multipartHttpServletRequest.getFile(&quot;editormd-image-file&quot;);        try {          //ucloudProvider 拿到文件url          String fileurl=  ucloudProvider.upload(file.getInputStream(),file.getContentType(),file.getOriginalFilename());            FileDTO fileDTO = new FileDTO();            fileDTO.setSuccess(1);            fileDTO.setMessage(&quot;成功&quot;);            fileDTO.setUrl(fileurl);            return fileDTO;        } catch (Exception e) {            e.printStackTrace();        }        FileDTO fileDTO = new FileDTO();        fileDTO.setSuccess(1);        fileDTO.setMessage(&quot;成功&quot;);        fileDTO.setUrl(fileurl);        return fileDTO;    }}</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>3.其他</h4><!-- /wp:heading --><!-- wp:paragraph --><p>至于集成editormd、数据库分页、和ajax 的简单使用感觉比较简单，教程也很多就不细说。</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      使用Spring Boot 开发的交流社区项目，项目特点是接入了github登录，支持markdown语法编辑，回复评论通知等功能。
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 文件上传</title>
    <link href="/2019/07/26/spring-boot-fileupload/"/>
    <id>/2019/07/26/spring-boot-fileupload/</id>
    <published>2019-07-26T10:16:01.000Z</published>
    <updated>2019-09-08T15:57:25.101Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>在Spring Boot 项目中如何上传文件，今天在这里分享一下。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 1：前端准备：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>fileupload.html,一个简单的表单：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>    &lt;meta charset="UTF-8">    &lt;title>Title&lt;/title>&lt;/head>&lt;body>&lt;form action="/upload" method="post"  enctype="multipart/form-data">    &lt;input type="file" id="photo" name="photo">    &lt;input type="submit">&lt;/form>&lt;/body>&lt;/html></code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>Step2：application.properties配置</h3><!-- /wp:heading --><!-- wp:paragraph --><p>application.properties配置文件中如下配置：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>#临时目录文件夹spring.servlet.multipart.location=f:/temp/#自定义文件保存目录app.upload.path=f:upload/#单个文件上传最大大小spring.servlet.multipart.max-file-size=10MB#单个请求最大上传大小spring.servlet.multipart.max-request-size=50MB</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>Step 3：后台Controller：</h3><!-- /wp:heading --><!-- wp:code --><pre><code class="java">@Controllerpublic class FileUploadController {//   返回文件上传界面    @RequestMapping(&quot;/&quot;)    public String index(){        return &quot;fileupload&quot;;    }//    使用配置文件中自定义文件保存路径@Value(&quot;${app.upload.path}&quot;)    private String path=null;    @PostMapping(&quot;/upload&quot;)//    MultipartFile是上传文件接口，对应保存临时文件//    参数名要和前端name属性保持一致    public ModelAndView upload(@RequestParam(&quot;photo&quot;) MultipartFile photo) throws IOException {//        文件保存的路径//        String path=&quot;f:/upload/&quot;;//        文件使用原有名称命名//        String filename=photo.getOriginalFilename();//        文件使用上传的时间命名        String filename=new SimpleDateFormat(&quot;yyyyMMddHHmmssSSS&quot;).format(new Date());//        文件扩展名        String suffix=  photo.getOriginalFilename().substring(photo.getOriginalFilename().lastIndexOf(&quot;.&quot;));//        限制上传的文件类型        if(!suffix.equals(&quot;.jpg&quot;)){            throw  new RuntimeException(&quot;图片格式错误&quot;);        }//        Spring 提供了一个文件操作类FileCopyUtils        FileCopyUtils.copy(photo.getInputStream(),new FileOutputStream(path+filename+suffix));        return null;    }}</code></pre><!-- /wp:code --><!-- wp:paragraph --><p></p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      在Spring Boot 项目中如何上传文件，今天在这里分享一下。
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot SpringMVC常用的设置上下文方式</title>
    <link href="/2019/07/25/spring-boot-context/"/>
    <id>/2019/07/25/spring-boot-context/</id>
    <published>2019-07-25T10:16:01.000Z</published>
    <updated>2019-09-08T15:57:52.343Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>在学习Spring Boot中，SpringMVC常用的设置上下文方式如下：</p><!-- /wp:paragraph --><!-- wp:paragraph --><p> 首先看一下前端booklist.html： </p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>                    &lt;thead>                    &lt;tr>                        &lt;th>ID&lt;/th>                        &lt;th>书名&lt;/th>                        &lt;th>作者&lt;/th>                        &lt;th>价格&lt;/th>                        &lt;th>操作&lt;/th>                    &lt;/tr>                    &lt;/thead>                    &lt;tbody>                    &lt;tr th:each="book : ${books}">                        &lt;td th:text="${book.id}">&lt;/td>                        &lt;td th:text="${book.name}">&lt;/td>                        &lt;td th:text="${book.author}">&lt;/td>                        &lt;td th:text="${book.price}">&lt;/td>                    &lt;/tr>                    &lt;/tbody></code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>1.ModelAndView</h3><!-- /wp:heading --><!-- wp:paragraph --><p></p><!-- /wp:paragraph --><!-- wp:paragraph --><p>使用方法如下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>@RequestMapping("/book")    public ModelAndView queryAll(){        List&lt;Book> books =bookDao.selectAll();        ModelAndView modelAndView =new ModelAndView("booklist");        modelAndView.addObject("books",books);        return  modelAndView;    }</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color"> 1、高内聚低耦合原则。实质上上设计的函数尽量不带参数，便于不同系统间调用时更简单。 推荐使用ModelAndView， ModelAndView实质上是map，和web容器没有关系。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>2.Model</h3><!-- /wp:heading --><!-- wp:paragraph --><p>使用方法如下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>@RequestMapping("/book")public String queryAll(Model model){     List&lt;Book> books =bookDao.selectAll();     model.addAttribute("books" ,books);     return "booklist"; }</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>SpringMVC会自动创建Model对象，但是在一些特殊情况下需要手动创建对象。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>3.HttpServletRequest</h3><!-- /wp:heading --><!-- wp:paragraph --><p>使用方法如下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code> @RequestMapping("/book")    public String queryAll(HttpServletRequest request){        List&lt;Book> books =bookDao.selectAll();       request.setAttribute("books",books);        return  "booklist";    }</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>4.WebRequest</h3><!-- /wp:heading --><!-- wp:paragraph --><p>使用方法如下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>     @RequestMapping("/book")    public String queryAll(WebRequest webRequest){        List&lt;Book> books =bookDao.selectAll();       webRequest.setAttribute("books",books,WebRequest.SCOPE_REQUEST);        return  "booklist";    }</code></pre><!-- /wp:code --><!-- wp:paragraph {"ampFitText":true} --><p><amp-fit-text layout="fixed-height" min-font-size="6" max-font-size="72" height="80">WebRequest和HttpServletRequest这两种方法 和WEB容器强耦合, 不利于 更换容器或者扩展。不建议这两种方式 </amp-fit-text></p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      在学习Spring Boot中，SpringMVC常用的设置上下文方式如下：1.ModelAndView ,2.Model , 3.HttpServletRequest, 4.WebRequest
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Thymeleaf模板引擎</title>
    <link href="/2019/07/24/spring-boot-thymeleaf/"/>
    <id>/2019/07/24/spring-boot-thymeleaf/</id>
    <published>2019-07-24T10:16:01.000Z</published>
    <updated>2019-09-08T16:10:37.624Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:heading {"level":3} --><h3>1.模板 引擎简介 ：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>模板引擎将页面和数据进行分离，简化开发过程，主流模板引擎：Thymeleaf、&nbsp;FreeMarker、Velocity、Groovy、Mustache 、JSP 、Beetl</p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>Thymeleaf</strong>: <strong>优点</strong>，主要集中在：模板即原型，前后端分离。<strong>缺点</strong>：模板必须符合xml规范，速度偏慢。适用于个人独立开发</p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>小结</strong>：工作中FreeMarker用的较多，前瞻学习Beetl。现在前端框架例如Bootstrap、Vue较为流行。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>2.Thymeleaf依赖引入</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>(1)在pom.xml 配置文件中添加以下代码引入thymeleaf:</h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>&lt;dependency>            &lt;groupId>org.springframework.boot&lt;/groupId>            &lt;artifactId>spring-boot-starter-thymeleaf&lt;/artifactId>        &lt;/dependency></code></pre><!-- /wp:code --><!-- wp:paragraph --><p>(2)在html中引入thymeleaf命名空间，如下所示：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>&lt;html xmlns:th="http://www.thymeleaf.org" ></code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>3.Thymeleaf 语法</h3><!-- /wp:heading --><!-- wp:paragraph --><p>1.常用语法简单介绍</p><!-- /wp:paragraph --><!-- wp:list --><ul><li>#{}  主要读取常量,例如读取配置文件中的 数据</li><li>${}  主要读取变量，程序中创建的，灵活改变的量</li><li>@{}  主要和路径有关系，比如在th:href="@{****}"中的使用</li></ul><!-- /wp:list --><!-- wp:paragraph --><p>2.更多语法详请参考<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html" target="_blank" rel="noopener">官方文档</a></p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>4.Thymeleaf的使用：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>1.前端</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>&lt;tr th:each="book : ${books}">                        &lt;td th:text="${book.id}">&lt;/td>                        &lt;td th:text="${book.name}">&lt;/td>                        &lt;td th:text="${book.author}">&lt;/td>                        &lt;td th:text="${book.price}">&lt;/td>                        &lt;td>                            &lt;a th:href="@{'/book/predit/'+${book.id}}" >&lt;button class="btn btn-sm btn-primary">编辑&lt;/button>&lt;/a>                          &lt;a th:href="@{'/book/del/'+${book.id}}" >&lt;button class="btn btn-sm btn-danger" >删除&lt;/button>&lt;/a>                        &lt;/td>&lt;/tr></code></pre><!-- /wp:code --><!-- wp:paragraph --><p>2.后端</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>@Controllerpublic class bookController {    @Autowired    private BookDao bookDao;    RendDao rendDao;    @RequestMapping("/book")   public String queryAll(Model model){        List&lt;Book> books =bookDao.selectAll();        model.addAttribute("books" ,books);        return "booklist";    }</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>booklist.html 在templates下，我只需在返回中输入"booklist" Thymeleaf会自动渲染出 booklist.html 。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p></p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      模板引擎将页面和数据进行分离，简化开发过程，主流模板引擎：Thymeleaf、 FreeMarker、Velocity、Groovy、Mustache 、JSP 、Beetl
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 日志配置</title>
    <link href="/2019/07/23/spring-boot-logs/"/>
    <id>/2019/07/23/spring-boot-logs/</id>
    <published>2019-07-23T10:16:01.000Z</published>
    <updated>2019-09-08T16:04:45.238Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:heading {"level":3} --><h3>1.日志文件</h3><!-- /wp:heading --><!-- wp:list --><ul><li>Spring Boot 日志级别：Debug-&gt;INFO-&gt;WARN-&gt;ERROR</li><li> Spring Boot  默认日志级别：INFO</li></ul><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>2.控制台输出级别控制</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>（1）application.properties 中配置：ROOT代表默认全局设置</h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>logging.level.ROOT=INFO        //默认输出INFO以上包括INFO级别的日志</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>（2）application.properties中配置： 单独控制包的日志输出级别 </h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>logging.level.org.apache=ERROR  //只有EEEOR信息才会输出到控制台</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>3.将日志写到指定文件</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>（1）在 application.properties 设置日志文件目录：</h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>logging.file=F:/logs/document.log</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>（2）使用logback.xml自定义日志文件输出 </h4><!-- /wp:heading --><!-- wp:paragraph --><p>logback.xml和application.properties在同一个目录下</p><!-- /wp:paragraph --><!-- wp:code --><pre><code> &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &amp;lt;configuration  scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;    &amp;lt;contextName&gt;projectName&amp;lt;/contextName&gt;    &amp;lt;property name=&quot;contextName&quot; value=&quot;projectName&quot; /&gt;    &amp;lt;property name=&quot;log_dir&quot; value=&quot;./logs/&quot; /&gt;    &amp;lt;!--输出到控制台--&gt;    &amp;lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;        &amp;lt;!-- 级别过滤器。如果日志级别低于WARN，将被过滤掉。 ALL TRACE DEBUG INFO WARN ERROR--&gt;        &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;            &amp;lt;level&gt;DEBUG&amp;lt;/level&gt;        &amp;lt;/filter&gt;        &amp;lt;encoder&gt;            &amp;lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %msg - %file:%line%n&amp;lt;/pattern&gt;            &amp;lt;charset&gt;UTF-8&amp;lt;/charset&gt;        &amp;lt;/encoder&gt;    &amp;lt;/appender&gt;    &amp;lt;!-- 每天记录info级别日志文件 --&gt;    &amp;lt;appender name=&quot;InfoRollingFileAppender&quot;        class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &amp;lt;Prudent&gt;true&amp;lt;/Prudent&gt;        &amp;lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;            &amp;lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss} %-5level %msg - %file:%line%n&amp;lt;/Pattern&gt;        &amp;lt;/layout&gt;        &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &amp;lt;FileNamePattern&gt;${log_dir}/${contextName}_info%d{yyyy-MM-dd}.log            &amp;lt;/FileNamePattern&gt;        &amp;lt;/rollingPolicy&gt;        &amp;lt;!-- 级别过滤器。如果日志级别低于WARN，将被过滤掉。ALL TRACE DEBUG INFO WARN ERROR--&gt;        &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;            &amp;lt;level&gt;INFO&amp;lt;/level&gt;        &amp;lt;/filter&gt;        &amp;lt;!-- 除了DEBUG级别的日志，其它什么级别的日志都不要 --&gt;        &amp;lt;!-- &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;            &amp;lt;level&gt;DEBUG&amp;lt;/level&gt;            &amp;lt;level&gt;INFO&amp;lt;/level&gt;            &amp;lt;onMatch&gt;ACCEPT&amp;lt;/onMatch&gt;            &amp;lt;onMismatch&gt;DENY &amp;lt;/onMismatch&gt;        &amp;lt;/filter&gt; --&gt;    &amp;lt;/appender&gt;    &amp;lt;!-- 每天记录ERROR级别日志文件 --&gt;    &amp;lt;appender name=&quot;ErrorRollingFileAppender&quot;        class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &amp;lt;Prudent&gt;true&amp;lt;/Prudent&gt;        &amp;lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;            &amp;lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss} %-5level %msg - %file:%line%n&amp;lt;/Pattern&gt;        &amp;lt;/layout&gt;        &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &amp;lt;FileNamePattern&gt;${log_dir}/${contextName}_error%d{yyyy-MM-dd}.log            &amp;lt;/FileNamePattern&gt;        &amp;lt;/rollingPolicy&gt;        &amp;lt;!-- 级别过滤器。如果日志级别低于WARN，将被过滤掉。 --&gt;        &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;            &amp;lt;level&gt;ERROR&amp;lt;/level&gt;        &amp;lt;/filter&gt;        &amp;lt;!-- 除了DEBUG级别的日志，其它什么级别的日志都不要 --&gt;        &amp;lt;!-- &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;            &amp;lt;level&gt;DEBUG&amp;lt;/level&gt;            &amp;lt;level&gt;INFO&amp;lt;/level&gt;            &amp;lt;onMatch&gt;ACCEPT&amp;lt;/onMatch&gt;            &amp;lt;onMismatch&gt;DENY &amp;lt;/onMismatch&gt;        &amp;lt;/filter&gt; --&gt;    &amp;lt;/appender&gt;    &amp;lt;root&gt;        &amp;lt;appender-ref ref=&quot;console&quot; /&gt;        &amp;lt;appender-ref ref=&quot;InfoRollingFileAppender&quot; /&gt;        &amp;lt;appender-ref ref=&quot;ErrorRollingFileAppender&quot; /&gt;    &amp;lt;/root&gt; &amp;lt;/configuration&gt;</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">使用logback.xml，上面  properties 中日志配置将全部失效</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      Spring Boot日志文件可以在服务遇到问题时可以根据日志文件快速定位问题所在，解决问题。1.Spring Boot 日志级别：Debug-&gt;INFO-&gt;WARN-&gt;ERROR 2. Spring Boot 默认日志级别：INFO
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Sakura安装Gitalk</title>
    <link href="/2019/07/01/gitalk/"/>
    <id>/2019/07/01/gitalk/</id>
    <published>2019-07-01T10:16:01.000Z</published>
    <updated>2019-09-08T15:57:05.983Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h4><p>  Gitalk 是一款基于GitHub使用的评论插件，使用起来非常方便。最近Valine出了一些问题，无法正常使用，虽然官网给了修复的方法，但是我不想再使用Valine，于是便安装了Gitalk这款插件，下面给大家带来 <font color="#FF1493"> Sakura主题</font>安装gitalk的教程 <br></p><h4 id="申请-OAuth-Apps"><a href="#申请-OAuth-Apps" class="headerlink" title="申请 OAuth Apps"></a>申请 OAuth Apps</h4><p>首先登Github主页，点击你的头像依次点击<font color="#ff6633">Settings-&gt;Developer settings-&gt;OAuth Apps-&gt; new OAuth Apps</font><br>将会到下面的界面：</p><p><img src="https://cdn.jsdelivr.net/gh/yremp/resource@4.5/img/posts/gitalkapply01.png" alt></p><p>里面几个参数介绍如下：</p><ol><li>Application name:应用名称，这个你自己随便写，合法就行</li><li>Homepage URL:这个填写你的博客地址例如：<a href="https://yremp.github.io" target="_blank" rel="noopener">https://yremp.github.io</a></li><li>Application description:应用描述随便填</li><li>Authorization callback URL:如果你绑定了个性域名一定要填写个性域名,例如：<a href="https://yremp.club" target="_blank" rel="noopener">https://yremp.club</a> </li></ol><p><img src="https://cdn.jsdelivr.net/gh/yremp/resource@4.4/img/posts/key.png" alt></p><p>申请完成以后有两个重要参数Client ID、Client Secret后面会使用：<br></p><p>如下所示：<br><img src="https://cdn.jsdelivr.net/gh/yremp/resource@4.4/img/posts/gitalkapply02.png" alt></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>做完上面的准备工作接下来就是修改配置文件:在  <font color="#ff6633">\themes\Sakura</font> 下找到<font color="#ff6633"> _config.yml</font> 。打开，在最下方加入如下代码：</p><pre><code>gitalk:    # 是否自动展开评论框    autoExpand: true    # 应用编号    clientID: &#39;8972e4300aeaabe97cc0&#39;    # 应用秘钥    clientSecret: &#39;988d6142b09dd52db79a2b832ba8f068df13a99a&#39;    # issue仓库名    repo: &#39;yremp.github.io&#39;    # Github名    owner: &#39;yremp&#39;    # Github名    admin: [&#39;yremp&#39;]    # Ensure uniqueness and length less than 50    id: location.pathname    # Facebook-like distraction free mode    distractionFreeMode: false</code></pre><p>对照注释修改：</p><ol><li>clientID：       申请的应用ID</li><li>clientSecret：   申请的应用密匙</li><li>repo：           issue仓库名</li><li>owner：          你的github用户名</li><li>admin：          你的github用户名</li></ol><h4 id="修改布局文件"><a href="#修改布局文件" class="headerlink" title="修改布局文件"></a>修改布局文件</h4><p>接着，在 <font color="#ff6633">\themes\Sakura\layout_partial</font> 下找到<font color="#ff6633">comment.ejs</font>将里面的代码替换为如下代码：</p><pre><code>&lt;% if ( post.comments) { %&gt;  &lt;script src=&quot;https://cdn.jsdelivr.net/gh/yremp/yremp-js@1.1/gitalk.js&quot;&gt;&lt;/script&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/yremp/yremp-css@1.3/gitalk.css&quot;&gt;  &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;  &lt;script type=&quot;text/javascript&quot;&gt;      var gitalk = new Gitalk({          clientID: &#39;&lt;%= theme.gitalk.clientID %&gt;&#39;,          clientSecret: &#39;&lt;%= theme.gitalk.clientSecret %&gt;&#39;,          id: window.location.pathname,          repo: &#39;&lt;%= theme.gitalk.repo %&gt;&#39;,          owner: &#39;&lt;%= theme.gitalk.owner %&gt;&#39;,          admin: &#39;&lt;%= theme.gitalk.admin %&gt;&#39;      })      gitalk.render(&#39;gitalk-container&#39;)    &lt;/script&gt;&lt;% } %&gt;</code></pre><p>里面的js以及css文件是我从官方找的并且放在我的github上面，你可以去找官方的链接下载放到自己github上面，也可以直接用我的。然后，在 <font color="#ff6633">\themes\Sakura\layout_partial </font>下找到<font color="#ff6633">footer.ejs</font>在里面加入评论区容器：</p><pre><code>&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</code></pre><p>位置合适就好，可以参考我的：</p><p><img src="https://cdn.jsdelivr.net/gh/yremp/resource@4.4/img/posts/p1.png" alt></p><p>继续在这个文件里添加JS链接：</p><pre><code>&lt;script src=&quot;https://cdn.jsdelivr.net/gh/yremp/yremp-js@1.1/gitalk.js&quot;&gt;&lt;/script&gt;</code></pre><p>位置可以参考我的：</p><p><img src="https://cdn.jsdelivr.net/gh/yremp/resource@4.4/img/posts/p2.png" alt></p><p>最后，在 <font color="#ff6633">\themes\Sakura\layout_partial</font> 下找到<font color="#ff6633">head.ejs</font>加入如下代码：</p><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/yremp/yremp-css@1.3/gitalk.css&quot;&gt;</code></pre><p>可以参考我的：</p><p><img src="https://cdn.jsdelivr.net/gh/yremp/resource@4.4/img/posts/p3.png" alt></p><h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p>接下来就是：<br></p><ol><li>hexo clean</li><li>hexo g</li><li>hexo d</li></ol><p>大功告成，效果如下：<br><br><img src="https://cdn.jsdelivr.net/gh/yremp/resource@4.6/img/posts/style.png" alt></p><center>如果有什么问题，请到评论区留言。转载请标明作者和原文地址</center>]]></content>
    
    <summary type="html">
    
      Hexo-Sakura安装Gitalk教程
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Theme-Sakura</title>
    <link href="/2019/06/29/Hexo-Theme-Sakura/"/>
    <id>/2019/06/29/Hexo-Theme-Sakura/</id>
    <published>2019-06-29T10:16:01.000Z</published>
    <updated>2019-09-08T16:09:31.468Z</updated>
    
    <content type="html"><![CDATA[<p>hexo-theme-sakura主题 <a href="https://github.com/honjun/hexo-theme-sakura/blob/master/README.md" target="_blank" rel="noopener">English document</a></p><p>基于WordPress主题<a href="https://github.com/mashirozx/Sakura/" target="_blank" rel="noopener">Sakura</a>修改成Hexo的主题。</p><p><a href="https://sakura.hojun.cn" target="_blank" rel="noopener">demo预览</a></p><p>正在开发中……</p><p><img src="https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg" alt></p><h2 id="交流群"><a href="#交流群" class="headerlink" title="交流群"></a>交流群</h2><p>若你是使用者，加群QQ: 801511924</p><p>若你是创作者，加群QQ: 194472590</p><h2 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h2><ul><li>首页大屏视频</li><li>首页随机封面</li><li>图片懒加载</li><li>valine评论</li><li>fancy-box相册</li><li>pjax支持，音乐不间断</li><li>aplayer音乐播放器</li><li>多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）</li></ul><h2 id="赞赏作者"><a href="#赞赏作者" class="headerlink" title="赞赏作者"></a>赞赏作者</h2><p>如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！</p><p><a href="https://www.paypal.me/hojuncn" target="_blank" rel="noopener">paypal</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/AliPayQR.jpg" target="_blank" rel="noopener">Alipay 支付宝</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/WeChanSQ.jpg" target="_blank" rel="noopener">WeChat Pay 微信支付</a></p><h2 id="未完善的使用教程"><a href="#未完善的使用教程" class="headerlink" title="未完善的使用教程"></a>未完善的使用教程</h2><p>那啥？老实说我目前也不是很有条理233333333~</p><h2 id="1、主题下载安装"><a href="#1、主题下载安装" class="headerlink" title="1、主题下载安装"></a>1、主题下载安装</h2><p><a href="https://github.com/honjun/hexo-theme-sakura" target="_blank" rel="noopener">hexo-theme-sakura</a>建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。</p><p>下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行<code>npm i</code>安装依赖。</p><h2 id="2、主题配置"><a href="#2、主题配置" class="headerlink" title="2、主题配置"></a>2、主题配置</h2><h3 id="博客根目录下的-config配置"><a href="#博客根目录下的-config配置" class="headerlink" title="博客根目录下的_config配置"></a>博客根目录下的_config配置</h3><p>站点</p><pre><code class="yml"># Sitetitle: 你的站点名subtitle:description: 站点简介keywords:author: 作者名language: zh-cntimezone:</code></pre><p>部署</p><pre><code class="yml">deploy:  type: git  repo:     github: 你的github仓库地址    # coding: 你的coding仓库地址  branch: master</code></pre><p>备份 （使用hexo b发布备份到远程仓库）</p><pre><code class="yml">backup:  type: git  message: backup my blog of https://honjun.github.io/  repository:    # 你的github仓库地址,备份分支名  （建议新建backup分支）    github: https://github.com/honjun/honjun.github.io.git,backup    # coding: https://git.coding.net/hojun/hojun.git,backup</code></pre><h3 id="主题目录下的-config配置"><a href="#主题目录下的-config配置" class="headerlink" title="主题目录下的_config配置"></a>主题目录下的_config配置</h3><p>其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分</p><pre><code class="yml"># site name# 站点名 【改】prefixName: さくら荘そのsiteName: hojun# favicon and site master avatar# 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】favicon: /images/favicon.icoavatar: /img/custom/avatar.jpg# 站点url 【改】url: https://sakura.hojun.cn# 站点介绍（或者说是个人签名）【改】description: Live your life with passion! With some drive!# 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpgcdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6# 开启pjax 【选】pjax: 1# 站点首页的公告信息 【改】notice: hexo-Sakura主题已经开源，目前正在开发中...# 懒加载的加载中图片 【选】lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg# 站点菜单配置 【选】menus:  首页: { path: /, fa: fa-fort-awesome faa-shake }  归档: { path: /archives, fa: fa-archive faa-shake, submenus: {     技术: {path: /categories/技术/, fa: fa-code },     生活: {path: /categories/生活/, fa: fa-file-text-o },     资源: {path: /categories/资源/, fa: fa-cloud-download },     随想: {path: /categories/随想/, fa: fa-commenting-o },    转载: {path: /categories/转载/, fa: fa-book }  } }  清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: {     书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce },     番组: {path: /bangumi/, fa: fa-film faa-vertical },     歌单: {path: /music/, fa: fa-headphones },    图集: {path: /tags/图集/, fa: fa-photo }  } }  留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada }  友人帐: { path: /links/, fa: fa-link faa-shake }  赞赏: { path: /donate/, fa: fa-heart faa-pulse }  关于: { path: /, fa: fa-leaf faa-wrench , submenus: {     我？: {path: /about/, fa: fa-meetup},     主题: {path: /theme-sakura/, fa: iconfont icon-sakura },    Lab: {path: /lab/, fa: fa-cogs },  } }  客户端: { path: /client/, fa: fa-android faa-vertical }  RSS: { path: /atom.xml, fa: fa-rss faa-pulse }# Home page sort type: -1: newer first，1: older first. 【非】homePageSortType: -1# Home page article shown number) 【非】homeArticleShown: 10# 背景图片 【选】bgn: 8# startdash面板 url, title, desc img 【改】startdash:   - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png}  - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg}  - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg}# your site build time or founded date# 你的站点建立日期 【改】siteBuildingTime: 07/17/2018# 社交按钮(social)  url, img PC端配置 【改】social:  github: {url: http://github.com/honjun, img: /img/social/github.png}  sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png}  wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png}  zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png}  email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg}  wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png}# 社交按钮(msocial)  url, img 移动端配置 【改】msocial:  github: {url: http://github.com/honjun, fa: fa-github, color: 333}  weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39}  qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe}# 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】donate:  alipay: /img/custom/donate/AliPayQR.jpg  wechat: /img/custom/donate/WeChanQR.jpg  wechatSQ: /img/custom/donate/WeChanSQ.jpg# 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】movies:  url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2  # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用  name: Unbroken.mp4# 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】aplayer:   id: 2660651585  server: netease  type: playlist  fixed: true  mini: false  autoplay: false  loop: all  order: random  preload: auto  volume: 0.7  mutex: true# Valine评论配置【改】valine: truev_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHszv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ</code></pre><h2 id="分类页和标签页配置"><a href="#分类页和标签页配置" class="headerlink" title="分类页和标签页配置"></a>分类页和标签页配置</h2><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg" alt></p><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p><img src="https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg" alt></p><p>配置项在\themes\Sakura\languages\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。</p><pre><code class="yml">#category# 按分类名创建技术:    #中文标题    zh: 野生技术协会     # 英文标题    en: Geek – Only for Love    # 封面图片    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg生活:    zh: 生活    en: live    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg#tag# 标签名即是标题悦读:    # 封面图片    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg</code></pre><h2 id="单页面封面配置"><a href="#单页面封面配置" class="headerlink" title="单页面封面配置"></a>单页面封面配置</h2><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg" alt><br>如留言板页面页面，位于source下的comment下，打开index.md如下：</p><pre><code class="md">---title: commentdate: 2018-12-20 23:13:48keywords: 留言板description: comments: true# 在这里配置单页面头部图片，自定义替换哦~photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg---</code></pre><h2 id="单页面配置"><a href="#单页面配置" class="headerlink" title="单页面配置"></a>单页面配置</h2><h3 id="番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src="https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg" alt></p><pre><code class="yml">---layout: bangumititle: bangumicomments: falsedate: 2019-02-10 21:32:48keywords:description:bangumis:  # 番组图片  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg  # 番组名    title: 朝花夕誓——于离别之朝束起约定之花  # 追番状态 （追番ing/已追完）    status: 已追完  # 追番进度    progress: 100  # 番剧日文名称    jp: さよならの朝に約束の花をかざろう  # 放送时间    time: 放送时间: 2018-02-24 SUN.  # 番剧介绍    desc:  住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg    title: 朝花夕誓——于离别之朝束起约定之花    status: 已追完    progress: 50    jp: さよならの朝に約束の花をかざろう    time: 放送时间: 2018-02-24 SUN.    desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。---</code></pre><h3 id="友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg" alt></p><pre><code class="yml">---layout: linkstitle: links# 创建日期，可以改下date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改keywords: 友人帐 description: # true/false 开启/关闭评论comments: true # 页面头部图片，自定义修改photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置links:   # 类型分组  - group: 个人项目    # 类型简介    desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt;    items:    # 友链链接    - url: https://shino.cc/fgvf    # 友链头像      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg    # 友链站点名      name: Google    # 友链介绍  下面雷同      desc: Google 镜像    - url: https://shino.cc/fgvf      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg      name: Google      desc: Google 镜像  # 类型分组...  - group: 小伙伴们    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)    items:    - url: https://shino.cc/fgvf      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg      name: Google      desc: Google 镜像    - url: https://shino.cc/fgvf      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg      name: Google      desc: Google 镜像---</code></pre><h2 id="写文章配置"><a href="#写文章配置" class="headerlink" title="写文章配置"></a>写文章配置</h2><p>主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：</p><pre><code class="md">{% bili video_id [page] %}</code></pre><p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-bili</a>。</p><p>hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：</p><pre><code class="md">{% fb_img src [caption] %}</code></pre><p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-fancybox_img</a></p><h2 id="还有啥，一时想不起来……"><a href="#还有啥，一时想不起来……" class="headerlink" title="还有啥，一时想不起来……"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>]]></content>
    
    <summary type="html">
    
      hexo-sakura主题使用教程
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="悦读" scheme="/tags/%E6%82%A6%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>jsDeliver+github使用教程</title>
    <link href="/2019/06/24/jsDeliver+github/"/>
    <id>/2019/06/24/jsDeliver+github/</id>
    <published>2019-06-24T10:16:01.000Z</published>
    <updated>2019-09-08T16:08:56.437Z</updated>
    
    <content type="html"><![CDATA[<p>前言:国内加载github的资源比较慢，需要使用CDN加速来优化网站打开速度，于是使用jsDeliver+github搭建免费的cdn。jsDelivr 是一个免费开源的 CDN 解决方案，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源。</p><h2 id="写给小白的-懂的前面可以略过"><a href="#写给小白的-懂的前面可以略过" class="headerlink" title="写给小白的,懂的前面可以略过"></a>写给小白的,懂的前面可以略过</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>NPM是JavaScript的包管理器，也是世界上最大的软件注册中心。发现可重用代码的包——并以强大的新方式组装它们。每星期大约有 30 亿次的下载量，包含超过 600000 个 包（package（即，代码模块）。来自各大洲的开源软件开发者使用 npm 互相分享和借鉴。包的结构使您能够轻松跟踪依赖项和版本。<br>所以jsDeliver+npm就是把npm上的包当做cdn的存储。<br>使用教程：</p><pre><code>// load any project hosted on npm// 加载以NPM为存储的任何项目https://cdn.jsdelivr.net/npm/package@version/file// load jQuery v3.2.1// 比如加载Jquery3.2.1https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js// use a version range instead of a specific version//使用版本范围而不是特定版本https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.jshttps://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js// omit the version completely to get the latest one//完全忽略版本以获取最新版本，不建议使用https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js略......</code></pre><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。<br>jsDeliver+Github使用教程：</p><pre><code>// load any GitHub release, commit, or branch// 加载任何Github发布、提交或分支https://cdn.jsdelivr.net/gh/user/repo@version/file略......</code></pre><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>WordPress是一款个人博客系统，并逐步演化成一款内容管理系统软件，它是使用PHP语言和MySQL数据库开发的。用户可以在支持 PHP 和 MySQL数据库的服务器上使用自己的博客。<br>jsDeliver+WordPress使用教程：</p><pre><code>// load any plugin from the WordPress.org plugins SVN repo// 从WordPress.org等SVN仓库加载任何插件https://cdn.jsdelivr.net/wp/plugins/project/tags/version/file略......</code></pre><h2 id="第一步：新建github仓库"><a href="#第一步：新建github仓库" class="headerlink" title="第一步：新建github仓库"></a>第一步：新建github仓库</h2><p><img src="https://upload.cc/i1/2019/05/24/n4ZY5V.png" alt><br>(我已经有这个仓库，so…这不是重点)<br>接着在本地电脑克隆上图仓库（前提配置好本地git环境和ssh）<br>命令如下：</p><pre><code>cd 某个目录下git clone git@github.com:你的用户名/cdn.git</code></pre><h2 id="第二步：上传需要的资源"><a href="#第二步：上传需要的资源" class="headerlink" title="第二步：上传需要的资源"></a>第二步：上传需要的资源</h2><p>复制需要的静态资源到本地git仓库中，提交到github仓库上。<br>命令如下：</p><pre><code>cd 到git仓库目录下// 查看状态git status// 添加所以改动git add .// 提交git commit -m &#39;第一次提交&#39;// 推送至远程仓库git push</code></pre><p>（注：jsDeliver不支持加载超过20M的资源，所以一些视频最好压缩到20M以下）</p><h2 id="第三步：发布仓库"><a href="#第三步：发布仓库" class="headerlink" title="第三步：发布仓库"></a>第三步：发布仓库</h2><p><img src="https://upload.cc/i1/2019/05/24/ehcrEO.png" alt></p><p><img src="https://upload.cc/i1/2019/05/24/37gEzn.png" alt><br>点击release发布</p><p>发布版本号1.0（自定义）</p><h2 id="第四步：通过jsDeliver引用资源"><a href="#第四步：通过jsDeliver引用资源" class="headerlink" title="第四步：通过jsDeliver引用资源"></a>第四步：通过jsDeliver引用资源</h2><pre><code>使用方法：https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径比如：//加载jshttps://cdn.jsdelivr.net/gh/yremp/cdn@1.0/js/jquery.js//加载图片https://cdn.jsdelivr.net/gh/yremp/cdn@1.0/images/hb.png</code></pre><p><font color="#0099ff" size="4" face="黑体">重点：这个链接相当于一个直链，使用和直链一样，如下图：</font></p><p><img src="https://upload.cc/i1/2019/05/25/pRCHh9.png" alt></p><p><font color="#0099ff" size="4" face="黑体">总的来说，直链怎么用，这个链接怎么用</font></p><p>尊重原创，转载自hojun的文章并做修改。 点击查看<a href="https://www.hojun.cn/2019/01/18/jsDeliver-github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84cdn/" target="_blank" rel="noopener">原文</a>.  </p><br><br><center>希望这篇文章能给你带来知识和乐趣，喜欢博主的文章可以留言哦</center>]]></content>
    
    <summary type="html">
    
      sDeliver+github使用教程
    
    </summary>
    
    
      <category term="转载" scheme="/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Sakura新手使用手册</title>
    <link href="/2019/05/26/teach/"/>
    <id>/2019/05/26/teach/</id>
    <published>2019-05-26T14:16:01.000Z</published>
    <updated>2019-09-08T15:57:16.594Z</updated>
    
    <content type="html"><![CDATA[<p>有很多小伙伴使用Sakura这款主题却又不知到如何美化，到处找别人问很麻烦，而我当初也是花了很长时间去摸索，才了解了这款主题的一些具体设置。下面我就按照从主页到子页面，从顶部到页脚的顺序给你们介绍如何自定义这款主题。</p><p><font color="#0099ff" size="3" face="黑体"><br><br>1.本教程主要写给刚入门的小白，大佬随意。<br><br>2.教程比较长，建议根据右边标题索引快速找到自己感兴趣的部分<br></font></p><p><br></p><h2 id="一：顶部站点名字："><a href="#一：顶部站点名字：" class="headerlink" title="一：顶部站点名字："></a>一：顶部站点名字：</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/headmark.png" alt><br>这个是在<font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font>这个配置文件中修改</p><pre><code>//site nameprefixName: 君の名はsiteName: yrempurl: https://yremp2.github.io/ </code></pre><p>其中，URL是点击后跳转地址.<br>由于我在<font color="#FF1493" size="3" face="黑体"> /themes/sakura/source/css/style.css</font>下修改了样式表去掉了prefixName，所以图上是没有的<br>大家如果想修改其相关的样式也可以去这个css文件中自定义,这个文件是主要的css文件，大部分的样式都是由这个文件定义的。</p><h2 id="二：顶部导航栏"><a href="#二：顶部导航栏" class="headerlink" title="二：顶部导航栏"></a>二：顶部导航栏</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/hendmenu.png" alt><br>这个在主题使用教程里面，作者好像已经是给出来了，大家可以仔细去阅读以下(当初我就是没有认真阅读爬了不少坑)<br>这也是<font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font>这个配置文件里面定义的</p><pre><code>menus:  首页: { path: /, fa: fas fa-home  fa-1x }  归档: { path: /archives, fa: far fa-folder-open, submenus: {     技术: {path: /categories/技术/, fa: fab fa-windows },     生活: {path: /categories/生活/, fa: fa-book },     资源: {path: /categories/资源/, fa: fa-cloud-download },     随想: {path: /categories/随想/, fa: fa-commenting-o },    转载: {path: /categories/转载/, fa: fas fa-clone }  } }  清单: { path: javascript:;, fa: fas fa-tasks,submenus: {     书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce },     番组: {path: /bangumi/, fa: fa-film faa-vertical },     歌单: {path: /music/, fa: fa-headphones },    图集: {path: /tags/图集/, fa: fa-photo }  } }  留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada }  友人帐: { path: /links/, fa: fa-link faa-shake }</code></pre><p>  前面的path是网页路径，这个不建议修改，但可以修改。后面的如:<font color="#0099ff" size="3" face="黑体"> fa: fas fa-home  fa-1x </font>这个就是对应的图标设置,关于这个图标大家可以去<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">fontawesome</a>看教程以及选择自己喜欢的图标，导航栏下拉下拉菜单的图标修改和导航栏相同。</p><h2 id="三：头像"><a href="#三：头像" class="headerlink" title="三：头像"></a>三：头像</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/head.png" alt><br>很多小伙伴拿到主题后第一时间肯定是修改这个头像，毕竟这个比较能代表自己嘛，那么这个头像配置在哪(⊙o⊙)?<br>如果有经验的小伙伴肯定是自己就能找到，这个配置在：<br><font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font></p><pre><code>cdn: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5avatar: /img/custom/head.jpg</code></pre><p>我这个是使用cdn后的路径，也可以修改为：</p><pre><code>avatar: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/custom/head.jpg</code></pre><p>至于cdn：大家可以去看我的另一篇博客<a href="https://yremp2.github.io/2019/05/24/jsDeliver+github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">jsDeliver+github使用教程</a></p><h2 id="四：社交栏"><a href="#四：社交栏" class="headerlink" title="四：社交栏"></a>四：社交栏</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/social.png" alt></p><h3 id="1-个性签名"><a href="#1-个性签名" class="headerlink" title="1.个性签名"></a>1.个性签名</h3><p>这个在<font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font>里面，由如下代码定义</p><pre><code>description: 南风过境，十里春风不如你！</code></pre><p>直接修改即可</p><h3 id="2-内容"><a href="#2-内容" class="headerlink" title="2.内容"></a>2.内容</h3><p>没错仍然是 <font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font>这个文件，找到</p><pre><code>#social  url, img PC端配置social:  github: {url: https://github.com/yremp, img: /img/social/github.png}  wangyiyun: {url: https://music.163.com/, img: /img/social/wangyiyun.png}  zhihu: {url: https://www.zhihu.com/, img: /img/social/zhihu.png}  qq: {url: /#, qrcode: /img/custom/qq.png, img: /img/social/qq.png}  wechat: {url: /#, qrcode: /img/custom/wechat.png, img: /img/social/wechat.png}#social  url, img 移动端配置msocial:  github: {url: https://github.com/yremp, fa: fa-github, color: 333}  weibo: {url: https://weibo.com/, fa: fa-weibo, color: dd4b39}  qq: {url: https://im.qq.com/news/, fa: fa-qq, color: 25c6fe}  </code></pre><p>前面URL对应点击后跳转地址，后面是图标路径，注意这个不是本地路径，是使用了cdn后的路径，上一栏 <font color="#0099ff" size="3" face="黑体">头像</font>设置中有介绍。至于pc和移动端注释已经标示了，就不多作介绍。</p><h3 id="3-社交栏整体样式"><a href="#3-社交栏整体样式" class="headerlink" title="3.社交栏整体样式"></a>3.社交栏整体样式</h3><p>在<font color="#FF1493" size="3" face="黑体"> /themes/sakura/source/css/style.css </font>Ctrl+f 搜索 header-info，这就是这个地方对应的div的class名字<br>就可以在代码中找到</p><pre><code>.header-info {    width: 63%;    margin: auto;    font-size: 16px;    color: #eaeadf;    background: rgba(255,255,255,.8);    padding: 15px;    margin-top: 22px;    letter-spacing: 0;    line-height: 30px;    border-radius: 10px;    box-sizing: initial;    white-space: nowrap;}.header-info:before {    content: &quot;&quot;;    position: absolute;    top: 127.5px;    left: 50%;    margin-left: -15px;    border-width: 15px;    border-style: solid;    border-color: transparent transparent rgba(255,255,255,.8) transparent;}.header-info p {    margin:0;    color: #605f5f;    font-family:&#39;Ubuntu&#39;,sans-serif;    font-weight:700}</code></pre><p>这就是其对应的样式表内容，大家可以根据需要修改。<font color="#FF1493" size="3" face="黑体">(Chrome) Ctrl+Shift+C</font><font color="#0099ff" size="3" face="黑体">然后点击你想查看的部分就会给你提示对应的部分例如：<br><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/teach1.png" alt>对应关系已经标出来，大家可以用这个功能快速找到网页和css对应关系，方便进行修改<br></font></p><h2 id="五：顶部图片和效果"><a href="#五：顶部图片和效果" class="headerlink" title="五：顶部图片和效果"></a>五：顶部图片和效果</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/image/headbg.png" alt></p><h3 id="1-顶部图片"><a href="#1-顶部图片" class="headerlink" title="1.顶部图片"></a>1.顶部图片</h3><p><font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font>中找到如下代码：</p><pre><code># 背景图片 根据喜好修改bg:  - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(1).jpg.webp  - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(2).jpg.webp  - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(3).jpg.webp  - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(4).jpg.webp  - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(5).jpg.webp  - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(6).jpg.webp  - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(8).jpg.webp</code></pre><h3 id="2-顶部图片效果"><a href="#2-顶部图片效果" class="headerlink" title="2.顶部图片效果"></a>2.顶部图片效果</h3><p>我的顶部效果改为了无，个人不太喜欢。可根据需要修改在：<br><font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font>中找到如下代码：</p><pre><code># 背景图片样式 空 原图效果 filter-dim 阴影 filter-grid 横条 filter-dot 点点bgclass: </code></pre><p>具体参数原作者在注释中已经标示</p><h2 id="六：通知栏"><a href="#六：通知栏" class="headerlink" title="六：通知栏"></a>六：通知栏</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/message.png" alt><br><font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font>中找到如下代码：</p><pre><code>notice: 欢迎来到我的博客！</code></pre><p>直接修改内容即可</p><h2 id="七：startdash"><a href="#七：startdash" class="headerlink" title="七：startdash"></a>七：startdash</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/start.png" alt></p><h3 id="1-模块名字"><a href="#1-模块名字" class="headerlink" title="1.模块名字"></a>1.模块名字</h3><p>在<font color="#FF1493" size="3" face="黑体"> /themes/sakura/layout/_partial/startdash.ejs</font>中有如下：</p><pre><code>&lt;div class=&quot;top-feature-row&quot;&gt;  &lt;h1 class=&quot;fes-title&quot; style=&quot;font-family: &#39;Ubuntu&#39;, sans-serif;&quot;&gt;  &lt;i class=&quot;fa fa-anchor&quot; aria-hidden=&quot;true&quot;&gt;  &lt;/i&gt;  startdash&lt;/h1&gt;  &lt;% for (dash in theme.startdash) { %&gt;  ....</code></pre><p>将其中startdash改为你想要的即可；</p><h3 id="2-内容设置"><a href="#2-内容设置" class="headerlink" title="2.内容设置"></a>2.内容设置</h3><p><font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font>中找到如下代码：</p><pre><code># startdash url, title, desc imgstartdash:   - {url: /theme-sakura/, title: Sakura, desc: 本站主题, img: /img/startdash/sakura.md.png}  - {url: http://space.bilibili.com/381786734, title: Bilibili, desc: b站视频, img: /img/startdash/bilibili.jpg}  - {url: /, title: 万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg}</code></pre><p>注释也已经标示出其参数，根据参数修改即可。</p><h2 id="八：Discovery"><a href="#八：Discovery" class="headerlink" title="八：Discovery"></a>八：Discovery</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/find.png" alt><br><font color="#FF1493" size="3" face="黑体"> /themes/sakura/layout/index.ejs</font>中找到如下代码：</p><pre><code>      &lt;h1 class=&quot;main-title&quot; style=&quot;font-family: &#39;Ubuntu&#39;, sans-serif;&quot;&gt;      &lt;i class=&quot;fa fa-envira&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;      Discovery&lt;/h1&gt;      &lt;%- partial(&#39;_partial/archive&#39;, {pagination: 2, index: true}) %&gt;      &lt;!-- 首页默认取最最新文章集 --&gt;</code></pre><p>Discovery就是标题，直接修改即可</p><h2 id="九：文章封面和内容；"><a href="#九：文章封面和内容；" class="headerlink" title="九：文章封面和内容；"></a>九：文章封面和内容；</h2><p>1.封面<br><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/page.png" alt><br>这个在在你写博客时，有photo属性，设置url即可 ，下面是示例：</p><pre><code>title: Sakura美化教程author: hojunavatar: https://wx1.sinaimg.cn/large/006bYVyvgy1ftand2qurdj303c03cdfv.jpgauthorLink: https://yremp.clubauthorAbout: authorDesc: categories: 技术date: 2019-5-26 12:16:01comments: truetags:  - webkeywords: Sakura主题自定义美化教程description:  Sakura美化教程photos: https://static.2heng.xin/wp-content/uploads//2019/02/wallhaven-672007-1-1024x576.png---</code></pre><p>photos 就是文章的封面</p><h2 id="十：归档子页面"><a href="#十：归档子页面" class="headerlink" title="十：归档子页面"></a>十：归档子页面</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/t.png" alt><br>这个相关的设置是在<font color="#FF1493" size="3" face="黑体"> /themes/sakura/language/zh-cn.yml</font><br>找到如下代码：</p><pre><code>#category技术:    zh: 野生技术协会    en: Technical Communication    img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(1).jpg.webp生活:    zh: 生活    en: Live    img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(2).jpg.webp......</code></pre><p>这就不用我解释，对比图片很容易看懂</p><h2 id="十一：清单子页面"><a href="#十一：清单子页面" class="headerlink" title="十一：清单子页面"></a>十一：清单子页面</h2><h3 id="1-悦读和图集，"><a href="#1-悦读和图集，" class="headerlink" title="1.悦读和图集，"></a>1.悦读和图集，</h3><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/read.png" alt><br>在<font color="#FF1493" size="3" face="黑体"> /themes/sakura/language/zh-cn.yml</font><br>找到如下代码：</p><pre><code>#tag悦读:    img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(6).jpg.webp图集:    img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(5).jpg.webpweb:    img:  https://cdn.jsdelivr.net/gh/yremp/resource@1.0/img/pic.jpg</code></pre><p>对比图片进行修改</p><h3 id="2-番组"><a href="#2-番组" class="headerlink" title="2.番组"></a>2.番组</h3><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/bili.png" alt><br>这个页面对应的配置是在<font color="#FF1493" size="3" face="黑体"> /source/bangumi/index.md</font>中修改，其中代码如下：</p><pre><code>---layout: bangumititle: bangumicomments: falsedate: 2019-02-10 21:32:48keywords:description:bangumis:  - img: http://pic.netbian.com/uploads/allimg/180413/121552-152359295246db.jpg    title: 狐妖小红娘    status: 追番中    progress: 100    jp: 狐妖小红娘    time: 2019-05-24 SUN.    desc: 白月初……  - img: http://pic.netbian.com/uploads/allimg/170605/130458-149663909840b3.jpg    title: 名侦探柯南    status: 追番中    progress: 1000    jp: 名探偵コナン    time: 2019-05-24 SUN.    desc: 中生侦探工藤新一……---</code></pre><p>对比图片修改内容即可，也可以增加其他内容。</p><h3 id="3-歌单"><a href="#3-歌单" class="headerlink" title="3.歌单"></a>3.歌单</h3><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/music.png" alt><br>整个页面配置在<font color="#FF1493" size="3" face="黑体"> /source/music/index.md</font>中：<br>其代码如下：</p><pre><code>---title: musicdate: 2018-12-20 23:14:28keywords: 喜欢的音乐description: comments: falsephotos: http://pic.netbian.com/uploads/allimg/170911/233802-15051442827782.jpg---&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=100% height=450 src=&quot;//music.163.com/outchain/player?type=0&amp;id=762797776&amp;auto=1&amp;height=430&quot;&gt;&lt;/iframe&gt;</code></pre><p>前面是常规的信息配置没什么好说的，photos就是这个页面的顶部图片，在</p><pre><code>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=100% height=450 src=&quot;//music.163.com/outchain/player?type=0&amp;id=762797776&amp;auto=1&amp;height=430&quot;&gt;&lt;/iframe&gt;</code></pre><p>中需要改一下id，这个id就是网易云音乐歌单id，怎么获取如下图：<br><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/teach2.png" alt><br>登录网页版网易云音乐，打开歌单，在地址栏中可以看到</p><pre><code>https://music.163.com/#/playlist?id=762797776</code></pre><p>其中id后面的数字复制，粘贴到代码里面的id后面就可以显示自己的歌单了。</p><h2 id="十二：友情链接相关配置"><a href="#十二：友情链接相关配置" class="headerlink" title="十二：友情链接相关配置"></a>十二：友情链接相关配置</h2><p><font color="#FF1493" size="3" face="黑体">(留言板/source/comment/index.md就一个背景修改就不出教程了，为了给下面其他教程留空间)</font><br><br><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/links.png" alt></p><h3 id="1-内容配置"><a href="#1-内容配置" class="headerlink" title="1.内容配置"></a>1.内容配置</h3><p>友情链接内容配置具体在<font color="#FF1493" size="3" face="黑体"> /source/link/index.md</font><br>代码如下</p><pre><code>......photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg //背景图片links:  - group: 小伙伴们    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)    items:    - url: https://yremp.github.io      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg      name: 好友1      desc: 点击查看......   ---</code></pre><p>根据实际情况修改其中的内容</p><h3 id="2-界面背景及布局"><a href="#2-界面背景及布局" class="headerlink" title="2.界面背景及布局"></a>2.界面背景及布局</h3><p>界面背景及布局主要在<font color="#FF1493" size="3" face="黑体">/themes/sakura/layout/links.ejs</font><br>代码如下：</p><pre><code>        ........        &lt;p&gt;            欢迎交换友链qaq ꉂ(ˊᗜˋ)&lt;/p&gt;        &lt;p&gt;            请留言告诉我你的：            &lt;br&gt; 1、名字            &lt;br&gt; 2、一句话介绍（熟人我会亲自帮写的）            &lt;br&gt; 3、主页地址            &lt;br&gt; 4、头像（HTTPS*，可在评论区上传）        &lt;/p&gt;        ........</code></pre><p>对照图片根据需要修改</p><h2 id="十三：左下角播放器"><a href="#十三：左下角播放器" class="headerlink" title="十三：左下角播放器"></a>十三：左下角播放器</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/aplayer.png" alt><br>1.设置为自己的歌单 ，和清单里的歌单一样要先拿到网易歌单id，怎么获取上面<font color="#0099ff" size="3" face="黑体">清单子页面</font>里有相关介绍；<br>然后在<font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font>中找到如下代码：</p><pre><code>player:   id: 762797776  server: netease  type: playlist  fixed: true  autoplay: false  loop: all  order: random  preload: none  volume: 0.7  mutex: true</code></pre><p>修改为自己的网易云歌单id即可</p><h2 id="十四：切换背景"><a href="#十四：切换背景" class="headerlink" title="十四：切换背景"></a>十四：切换背景</h2><p><img src="https://cdn.jsdelivr.net/gh/yremp2/image@2.0/skin.png" alt><br>严格意义上来说这个并不算增加，算是恢复，作者在移植这款主题时，只删除了对应的ejs布局文件，并没有删除style.css和js里面相关代码，想要加上这个功能只需要把原作者的相关的div等加上就行。大佬可自行到白猫（原作者）网站查看源代码加上就行。如果是小白或者比较懒得朋友那你只需要按以下几个步骤即可实现这个功能：<br>1:<font color="#FF1493" size="3" face="黑体">找到 /themes/sakura/layout/layout.ejs</font><br>在里面加入两行代码代码位置和内容如下（注释下面那两行）：</p><pre><code>.................. &lt;!-- 实现换肤功能 --&gt;  &lt;%- partial(&#39;_partial/setdisplay&#39;) %&gt;   &lt;%- partial(&#39;_partial/set&#39;, null, {cache: !config.relative_link}) %&gt;  &lt;%- partial(&#39;_partial/mheader&#39;, null, {cache: !config.relative_link}) %&gt;  &lt;%- partial(&#39;_partial/aplayer&#39;, null, {cache: !config.relative_link}) %&gt; &lt;/body&gt;&lt;/html&gt;</code></pre><p>2: 在<font color="#FF1493" size="3" face="黑体">/themes/sakura/layout/_partial</font>文件夹下面依次新建set.ejs和setdisplay.ejs,其内容分别如下：<br><font color="#FF1493" size="3" face="黑体">set.ejs</font></p><pre><code>&lt;div class=&quot;changeSkin-gear no-select&quot;&gt;    &lt;div class=&quot;keys&quot; id=&quot;setbtn&quot;&gt; &lt;span id=&quot;open-skinMenu&quot;&gt; 切换主题 | SCHEME TOOL &amp;nbsp;&lt;i                class=&quot;iconfont icon-gear inline-block rotating&quot;&gt;&lt;/i&gt; &lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p><font color="#FF1493" size="3" face="黑体">setdisplay.ejs</font></p><pre><code>&lt;div class=&quot;skin-menu no-select&quot; id=&quot;mainskin&quot;  style=&quot;position: fixed&quot;&gt;    &lt;div class=&quot;theme-controls row-container&quot;&gt;        &lt;ul class=&quot;menu-list&quot;&gt;            &lt;li id=&quot;white-bg&quot;&gt; &lt;i class=&quot;fa fa-television&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt;            &lt;li id=&quot;sakura-bg&quot;&gt; &lt;i class=&quot;iconfont icon-sakura&quot;&gt;&lt;/i&gt;&lt;/li&gt;            &lt;li id=&quot;gribs-bg&quot;&gt; &lt;i class=&quot;fa fa-slack&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt;            &lt;li id=&quot;KAdots-bg&quot;&gt; &lt;i class=&quot;iconfont icon-dots&quot;&gt;&lt;/i&gt;&lt;/li&gt;            &lt;li id=&quot;totem-bg&quot;&gt; &lt;i class=&quot;fa fa-optin-monster&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt;            &lt;li id=&quot;pixiv-bg&quot;&gt; &lt;i class=&quot;iconfont icon-pixiv&quot;&gt;&lt;/i&gt;&lt;/li&gt;            &lt;li id=&quot;bing-bg&quot;&gt; &lt;i class=&quot;iconfont icon-bing&quot;&gt;&lt;/i&gt;&lt;/li&gt;            &lt;li id=&quot;dark-bg&quot;&gt; &lt;i class=&quot;fa fa-moon-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/div&gt;   &lt;canvas id=&quot;night-mode-cover&quot;&gt;&lt;/canvas&gt;</code></pre><h2 id="十五：评论不在白名单问题"><a href="#十五：评论不在白名单问题" class="headerlink" title="十五：评论不在白名单问题"></a>十五：评论不在白名单问题</h2><p>首先，和评论相关的配置在：<font color="#FF1493" size="3" face="黑体"> /themes/sakura/config.yml </font><br>具体代码：</p><pre><code># Valinevaline: truev_appId: Qtrxu5pUbpfjbn2CpMH1jetC-gzGzoHszv_appKey: 72NpGpYhuAYcKyDhYSOFE1b2</code></pre><p>这里面的id和Key是需要修改的，因为这是我的v_appId和v_appKey，你需要去<a href="https://leancloud.cn/" target="_blank" rel="noopener">注册</a>。具体的请自行百度。只提醒一点，注册完以后 ，申请app以后，要设置 <font color="#FF1493" size="3" face="黑体"> 白名单</font>。</p><center>如果发现教程有什么问题或者你有什么问题，请到评论区留言。转载请标明作者和原文地址</center>]]></content>
    
    <summary type="html">
    
      sakura使用教程，比较详细
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
</feed>
