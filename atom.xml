<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yremp</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-09-11T05:02:20.603Z</updated>
  <id>/</id>
  
  <author>
    <name>yremp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jsproxy +GitHub Pages实现在线代理</title>
    <link href="/2019/09/10/jsproxy-github/"/>
    <id>/2019/09/10/jsproxy-github/</id>
    <published>2019-09-10T09:16:01.000Z</published>
    <updated>2019-09-11T05:02:20.603Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>之前已经写了Jsproxy+Cloudflare 实现浏览器在线代理，后来我自己又测试了Jsproxy +GitHub Pages实现在线代理 ，这个速度我只能说不是很稳定，和网络运营商也有一定关系，当然了毕竟是免费的，不要求太多。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>前提环境：</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>已经有GitHub账号【必须】</li><li>已经新建了io仓库(例:yremp2.github.io)，开启这个仓库的GitHub Pages服务【必须】</li><li>SSH Key配置完成【非必要】</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>下载项目：</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>下载地址</h4><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>地址1：<a href="https://github.com/yremp2/yremp2.github.io" target="_blank" rel="noopener">我的io仓库</a></li><li>地址2：<a href="https://github.com/yremp2/jsproxy" target="_blank" rel="noopener">我的仓库</a>(Fork于官方仓库)</li><li> 地址3：<a href="https://github.com/EtherDream/jsproxy" target="_blank" rel="noopener">官方地址</a> </li></ol><!-- /wp:list --><!-- wp:heading {"level":4} --><h4>下载方式</h4><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>最快速的方法是直接clone或者下载我的io仓库</li><li>可以去地址2直接下载我已经切换好分支的项目</li><li>  如果从地址1，你需要自己去Fork一份，然后切将gh-pages设置为主分支，然后下载项目(zip或者git clone)  </li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>修改配置文件</h3><!-- /wp:heading --><!-- wp:paragraph --><p>下载完成后，找到项目根目录下的conf.js,找到下面代码修改默认节点</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>. /**   * 默认节点   */  node_default: 'mysite',</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>可以修改为</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>'demo-hk'  -香港节点</li><li>'demo-sg'   -新加坡节点</li><li> 'cfworker' -cloud flare</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>部署到Github</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>1.clone io 仓库</h4><!-- /wp:heading --><!-- wp:image {"id":1382} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-14.png" alt class="wp-image-1382"></figure><!-- /wp:image --><!-- wp:heading {"level":4} --><h4>2.复制项目</h4><!-- /wp:heading --><!-- wp:paragraph --><p>把下载并修改的Jsproxy项目复制到clone的yremp2.github.io仓库(示例</p><!-- /wp:paragraph --><!-- wp:image {"id":1384} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-16-1024x255.png" alt class="wp-image-1384"></figure><!-- /wp:image --><!-- wp:heading --><h2>3.commit</h2><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>git commit -m "messages"</code></pre><!-- /wp:code --><!-- wp:heading --><h2>4.Push</h2><!-- /wp:heading --><!-- wp:paragraph --><p>推到github 远程 io仓库</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>git push</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>完成</h3><!-- /wp:heading --><!-- wp:paragraph --><p>访问 http://github用户名.github.io 即可开始访问</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      之前已经写了Jsproxy+Cloudflare 实现浏览器在线代理，后来我自己又测试了 Jsproxy +GitHub Pages实现在线代理 ，这个速度我只能说不是很稳定，和网络运营商也有一定关系，当然了毕竟是免费的，不要求太多。
    
    </summary>
    
    
      <category term="代理" scheme="/categories/%E4%BB%A3%E7%90%86/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot连接远程服务器MySQL数据库</title>
    <link href="/2019/09/09/spring-boot-mysql/"/>
    <id>/2019/09/09/spring-boot-mysql/</id>
    <published>2019-09-09T11:16:01.000Z</published>
    <updated>2019-09-09T15:42:23.996Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>最近因为某些原因需要 Spring Boot连接远程MySQL数据库 写项目，其实之前在刚学这个Spring Boot的时候也尝试直接连接到远程数据库，但是均以失败告终，最近终于解决了这个问题，特此记录也同时分享一下自己的经验吧，希望能帮助到有需要的人。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>前提条件</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>服务器已经安装并启动数据库服务，如MySQL</li><li>建立相应的数据库，下面以我要连接的数据库example 为例</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>整合Mybatis</h3><!-- /wp:heading --><!-- wp:paragraph --><p>在pom.xml 引入相关依赖</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code> &lt;!--引入mybatis-->        &lt;dependency>            &lt;groupId>org.mybatis.spring.boot&lt;/groupId>            &lt;artifactId>mybatis-spring-boot-starter&lt;/artifactId>            &lt;version>1.2.0&lt;/version>        &lt;/dependency>  &lt;!--mysql-connector-->        &lt;dependency>            &lt;groupId>mysql&lt;/groupId>            &lt;artifactId>mysql-connector-java&lt;/artifactId>        &lt;/dependency></code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>编辑配置文件</h3><!-- /wp:heading --><!-- wp:paragraph --><p>编辑application.properties，准备连接数据库</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>#connect to mysql#yremp.live 可以修改为你的服务器公网ip地址 | example 是你要连接的数据库名称spring.datasource.url=jdbc:mysql://yremp.live:3306/example?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;allowMultiQueries=true#数据库用户名spring.datasource.username=example#对应用户的密码spring.datasource.password=123456#JDBC驱动固定格式spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>放行数据库运行端口</h3><!-- /wp:heading --><!-- wp:paragraph --><p>这是最重要的一个环节，我前几次失败的原因就在于此，只顾着考虑MySQL已经运行在3306端口，而我忘记了去防火墙放行3306端口，导致无法连接到数据库。</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/09/09/pic018499e.png" alt="pic018499e.png" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>如果不修改，则会报以下错误信息</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>Whitelabel Error PageThis application has no explicit mapping for /error, so you are seeing this as a fallback.Mon Sep 09 10:19:40 CST 2019There was an unexpected error (type=Internal Server Error, status=500).nested exception is org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server. ### The error may exist in com/example/demo/mapper/UserMapper.java (best guess) ### The error may involve com.example.demo.mapper.UserMapper.SelectAll ### The error occurred while executing a query ### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>修改数据库访问权限</h3><!-- /wp:heading --><!-- wp:paragraph --><p>最后就是数据库权限，需要修改为指定ip或者所有人</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/09/09/pic0205558.png" alt="pic0205558.png" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>否则报以下错误信息</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>Whitelabel Error PageThis application has no explicit mapping for /error, so you are seeing this as a fallback.Mon Sep 09 10:16:02 CST 2019There was an unexpected error (type=Internal Server Error, status=500).nested exception is org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: null, message from server: "Host '1.194.129.186' is not allowed to connect to this MySQL server" ### The error may exist in com/example/demo/mapper/UserMapper.java (best guess) ### The error may involve com.example.demo.mapper.UserMapper.SelectAll ### The error occurred while executing a query ### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: null, message from server: "Host '1.194.129.186' is not allowed to connect to this MySQL server"</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>查询数据</h3><!-- /wp:heading --><!-- wp:paragraph --><p>编写代码查询数据，这里就不展示代码，就是简单的数据查询</p><!-- /wp:paragraph --><!-- wp:gallery {"ids":[1355,1356]} --><ul class="wp-block-gallery columns-2 is-cropped"><li class="blocks-gallery-item"><figure><img src="https://yremp.live/wp-content/uploads/2019/09/pic03.png" alt data-id="1355" data-link="https://yremp.live/?attachment_id=1355" class="wp-image-1355"></figure></li><li class="blocks-gallery-item"><figure><img src="https://yremp.live/wp-content/uploads/2019/09/pic04.png" alt data-id="1356" data-link="https://yremp.live/?attachment_id=1356" class="wp-image-1356"></figure></li></ul><!-- /wp:gallery --><!-- wp:paragraph --><p>左边是查询结果，右边是数据库信息</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>注意事项</h3><!-- /wp:heading --><!-- wp:paragraph --><p>为方便快速搭建环境，我使用了以下工具</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>宝塔面板，快速安装配置管理MySQL等服务。</li><li>Navicat Premium 12 ，数据库管理工具。</li><li>IntelliJ IDEA，这个应该不用多说。</li></ol><!-- /wp:list -->]]></content>
    
    <summary type="html">
    
      最近因为某些原因需要 Spring Boot连接远程MySQL数据库 写项目，其实之前在刚学这个Spring Boot的时候也尝试直接连接到远程数据库，但是均以失败告终，最近终于解决了这个问题，特此记录也同时分享一下自己的经验吧，希望能帮助到有需要的人。
    
    </summary>
    
    
      <category term="Java" scheme="/categories/Java/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>VPS服务器搭建SSR|酸酸乳教程</title>
    <link href="/2019/09/05/vps-ssr/"/>
    <id>/2019/09/05/vps-ssr/</id>
    <published>2019-09-05T06:16:01.000Z</published>
    <updated>2019-09-09T15:33:04.670Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>给大家分享一下 VPS服务器搭建SSR|酸酸乳教程 ，非常简单易懂，10分钟搭建自己的SSR服务。当然这个教程只是做技术交流学习使用，请勿滥用，禁止一切违反国家法律的行为。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3> ShadowsocksR 搭建流程</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>购买国外VPS服务器</li><li>在服务器端安装SSR服务</li><li>用Shadowsocks客户端连接</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>Step 1 ：服务器选购</h3><!-- /wp:heading --><!-- wp:paragraph --><p>博主这里购买的是一台配置非常低的服务器，毕竟只是学习使用。大家如果用于学习可以去<strong><a href="https://billing.virmach.com" target="_blank" rel="noopener">virmach</a></strong> 购买同款VPS，价格大概1.25$ （9￥） /月。主要是可以支付宝付款，很方便。购置教程 详情参考 <a href="https://www.bilibili.com/video/av65426477?t=491" target="_blank" rel="noopener">B站视频</a>。主要配置如下：</p><!-- /wp:paragraph --><!-- wp:image {"id":1248} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-11.png" alt class="wp-image-1248"></figure><!-- /wp:image --><!-- wp:heading {"level":3} --><h3>Step 2：服务端安装SSR</h3><!-- /wp:heading --><!-- wp:paragraph --><p>推荐选用CentOS系统的VPS，这样后面很方便。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>下载文件</h4><!-- /wp:heading --><!-- wp:paragraph --><p>首先用SSH工具（推荐 <a href="https://mobaxterm.mobatek.net/" target="_blank" rel="noopener">MobaXterm</a> ，支持粘贴复制以及FTP等等功能）连接到VPS，执行</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>然后继续执行</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>chmod +x shadowsocks-all.sh</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>执行以下命令，开始配置SSR信息</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>./shadowsocks-all.sh 2>&amp;1 | tee shadowsocks-all.log</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>开始配置SSR信息</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>选择版本</h4><!-- /wp:heading --><!-- wp:image {"id":1219} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-2.png" alt="VPS搭建SSR服务器教程" class="wp-image-1219"></figure><!-- /wp:image --><!-- wp:paragraph --><p>推荐选择<strong>ShadowsocksR</strong>，输入<strong> 2</strong> 按下回车即可</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>SSR密码</h4><!-- /wp:heading --><!-- wp:image {"id":1220} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-3.png" alt="VPS搭建SSR服务器教程" class="wp-image-1220"></figure><!-- /wp:image --><!-- wp:paragraph --><p>自定义SSR连接密码</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>选择服务端口</h4><!-- /wp:heading --><!-- wp:image {"id":1221} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-4.png" alt="VPS搭建SSR服务器教程" class="wp-image-1221"></figure><!-- /wp:image --><!-- wp:paragraph --><p>这个基本上任意</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>选择加密方式</h4><!-- /wp:heading --><!-- wp:image {"id":1222} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-5.png" alt="VPS搭建SSR服务器教程" class="wp-image-1222"></figure><!-- /wp:image --><!-- wp:paragraph --><p>任选一种即可</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>选择SSR协议</h4><!-- /wp:heading --><!-- wp:image {"id":1223} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-6.png" alt="VPS搭建SSR服务器教程" class="wp-image-1223"></figure><!-- /wp:image --><!-- wp:heading {"level":4} --><h4>混淆</h4><!-- /wp:heading --><!-- wp:image {"id":1225} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-8.png" alt="VPS搭建SSR服务器教程" class="wp-image-1225"></figure><!-- /wp:image --><!-- wp:paragraph --><p>任意选择一种，然后任意键开始安装，安装完成后会给你一张二维码（会给你二维码保存路径），SSR客户端支持扫码直接添加代理。</p><!-- /wp:paragraph --><!-- wp:image {"id":1253} --><figure class="wp-block-image"><img src="https://yremp.live/wp-content/uploads/2019/09/image-12-1024x350.png" alt class="wp-image-1253"></figure><!-- /wp:image --><!-- wp:heading {"level":3} --><h3>客户端连接</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>IOS</h4><!-- /wp:heading --><!-- wp:paragraph --><p>我个人用的是Potatso Lite这款软件，需要美国ID，在美国APP Store下载，连接示例如下：（也可以扫描二维码直接添加）</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/09/05/QQ20190905142433522a2.png" alt="VPS搭建SSR服务器教程" border="0"><!-- /wp:html --><!-- wp:heading {"level":4} --><h4>Windows</h4><!-- /wp:heading --><!-- wp:paragraph --><p>下载小飞机（ShadowsocksR），这个网上很多</p><!-- /wp:paragraph --><!-- wp:image {"id":1228,"width":398,"height":556} --><figure class="wp-block-image is-resized"><img src="https://yremp.live/wp-content/uploads/2019/09/image-10.png" alt class="wp-image-1228" width="398" height="556"></figure><!-- /wp:image --><!-- wp:paragraph --><p>如上配置即可连接你的SSR服务</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>声明</h3><!-- /wp:heading --><!-- wp:paragraph --><p>严重警告，此教程仅仅用于网络技术学习使用，请勿滥用或者随意分享，不得违反国家法律。如有违反，请自行承担带来的法律责任，与本站无关。</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      给大家分享一下 VPS服务器搭建SSR|酸酸乳教程 ，非常简单易懂，10分钟搭建自己的SSR服务。当然这个教程只是做技术交流学习使用，请勿滥用，禁止一切违反国家法律的行为。
    
    </summary>
    
    
      <category term="代理" scheme="/categories/%E4%BB%A3%E7%90%86/"/>
    
    
      <category term="SSR" scheme="/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>Chevereto安装教程</title>
    <link href="/2019/08/29/chevereto/"/>
    <id>/2019/08/29/chevereto/</id>
    <published>2019-08-29T07:07:01.000Z</published>
    <updated>2019-09-09T15:29:12.501Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>前一段时间用 Chevereto 搭建了一个公开的图床，效果还不错，非常方便和简单。但是目前百度上的教程还是有一点问题的 这个 Chevereto 安装对初次接触的人来说是很不友好的，我在安装过程中也是遇到很多坑。下面就为大家带来完整的 Chevereto安装教程 。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>我的图床：</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>图床地址1：<a href="https://www.yremp.live" target="_blank" rel="noopener">https://www.yremp.live</a>（阿里小水管服务器搭建）</li><li>图床地址2：<a href="https://images.yremp.live " target="_blank" rel="noopener">https://images.yremp.live </a>（WJY大佬免费提供的大水管服务器搭建）</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>环境准备：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>以我自己实际为例</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>CentOS</li><li>Nginx </li><li>Mysql</li><li>PHP</li><li> 宝塔面板 （用这个简单很多）</li></ol><!-- /wp:list --><!-- wp:paragraph --><p>如果是从零开始，没有以上环境，那就一键安装宝塔，然后手动安装Nginx、Mysql、PHP</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>宝塔安装脚本</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在连接到服务器的终端执行安装脚本，不同Linux系统 有所区别：</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>Centos 安装脚本 ：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>Ubuntu/Deepin安装脚本 ：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>Debian安装脚本 ：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>其他系统请参考<a rel="noreferrer noopener" href="https://www.bt.cn/download/linux.html" target="_blank">官方说明</a>， 在安装时可能需要确认一下，屏幕上会有提示。 </p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>下载Chevereto</h3><!-- /wp:heading --><!-- wp:paragraph --><p>点击 进入 <strong><a rel="noreferrer noopener" href="https://github.com/Chevereto/Chevereto-Free" target="_blank">Chevereto-Free</a></strong> 官方Github仓库，下载项目。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>安装Chevereto</h3><!-- /wp:heading --><!-- wp:paragraph --><p>1.在宝塔面板首页，添加一个新的网站，</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/09/03/pic22c57cd.png" alt="pic22c57cd.png" border="0"><!-- /wp:html --><!-- wp:list {"ordered":true} --><ol><li>域名：填自己的域名（记得去解析）</li><li>备注：随意</li><li>根目录：填写域名后默认是域名，可以自定义，我修改为www/wwwroot/resource</li><li>FTP：不用创建</li><li>数据库：自己填写</li></ol><!-- /wp:list --><!-- wp:paragraph --><p>数据库信息自行填写但必须记住，创建完成后会给你提示数据库信息，后面进入Chevereto安装流程时要填写以下重要信息：</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>数据库名称</li><li>数据库用户名</li><li>数据库用户密码</li></ol><!-- /wp:list --><!-- wp:paragraph --><p>接着把创建好的网站根目录下面的初始化文件index.html 删除（其他想删就删），否则访问就是宝塔默认创建站点成功的提示。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>2.把下载的Chevereto解压后的文件用FTP工具上传到刚刚新建的网站目录下,例如：</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://images.yremp.live/images/2019/08/29/pic17.png" alt="pic17.png" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>3.注意看我的图片，resource是图床的根目录（也就是你新建的网站根目录，新建网站时自定义的），content 和 images 目录是  777 权限的，所以用SSH工具 连接服务器，在网站根目录下依次执行：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>chmod -R  777  content </code></pre><!-- /wp:code --><!-- wp:code --><pre class="wp-block-code"><code>chmod -R  777  images </code></pre><!-- /wp:code --><!-- wp:paragraph --><p>现在百度上的教程大部分都是全部给775，我测试发现权限是不够的</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>4.在app目录下新建settings.php,并赋予 777 权限，操作如下（已经在app目录下）</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>touch settings.phpchmod -R 777 settings.php</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>5.此时已经基本完成，不过现在你如果通过域名访问你的网站应该还是404，还差一个配置。在<strong>网站设置</strong>中的<strong>配置文件</strong>中加入以下代码（ 加入的位置参考配置文件中已有的 <strong>location /</strong>  ，同级别就行）：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>location / {    if (-f $request_filename/index.html){ rewrite (.*) $1/index.html break; } if (-f $request_filename/index.php){ rewrite (.*) $1/index.php; } if (!-f $request_filename){ rewrite (.*) /index.php; } try_files $uri $uri/ /api.php; } location /admin { try_files $uri /admin/index.php?$args;    }</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>此时访问你的网站就可以开始填写数据库信息，进行安装了。</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      前一段时间用 Chevereto 搭建了一个公开的图床，效果还不错，非常方便和简单。但是目前百度上的教程还是有一点问题的 这个 Chevereto 安装对初次接触的人来说是很不友好的，我在安装过程中也是遇到很多坑。下面就为大家带来完整的 Chevereto安装教程 。
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="图床" scheme="/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>WordPress SEO插件Yoast SEO</title>
    <link href="/2019/08/29/yoast-seo/"/>
    <id>/2019/08/29/yoast-seo/</id>
    <published>2019-08-29T05:07:01.000Z</published>
    <updated>2019-09-09T15:25:48.032Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>SEO对很多新人站长其实还是比较难的，比如博主我。在刚接触WordPress SEO的时候是比较懵逼的，然后我发现了  WordPress SEO插件Yoast SEO ，感觉功能很强大。它可以帮你优化文章、页面、归档、标签等等。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>下载：</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li><a href="https://yoast.com/wordpress/plugins/seo/" target="_blank" rel="noopener">官方下载</a>（或者在后台插件商城直接搜索Yoast SEO）</li><li> <a href="https://yremp.live/wp-content/uploads/plugins/Yoast SEO.zip" target="_blank" rel="noopener">Yoast SEO Premium版免费分享</a></li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>使用：</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>搜索外观</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在设置里面找到搜索外观进行系统的设置</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/29/pic1672034.png" alt="WordPress SEO插件Yoast SEO-流年，谁给过的倾城" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>这是系统的设置Post搜索外观，像元描述这种需要在写博客时自定义，除此之外我们还可以设置页面、归档等等的搜索外观。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>自定义</h4><!-- /wp:heading --><!-- wp:paragraph --><p>以博主写这篇博客为示例吧，在编辑器的下方可以找到如下：</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/29/pic153cac6.png" alt="WordPress SEO插件Yoast SEO-流年，谁给过的倾城" border="0"><!-- /wp:html --><!-- wp:paragraph --><p> Yoast SEO 可以帮我们设置 以下内容</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>焦点关键词</li><li> SEO title -搜索标题</li><li> Slug -固定链接</li><li> Meta description -元描述</li><li>同义词 (<a href="https://yremp.live/wp-content/uploads/plugins/Yoast%20SEO.zip" target="_blank" rel="noopener">Yoast SEO Premium版</a> )</li></ol><!-- /wp:list -->]]></content>
    
    <summary type="html">
    
      SEO对很多新人站长其实还是比较难的，比如博主我。在刚接触WordPress SEO的时候是比较懵逼的，然后我发现了 WordPress SEO插件Yoast SEO ，感觉功能很强大。它可以帮你优化文章、页面、归档、标签等等。
    
    </summary>
    
    
      <category term="WordPress" scheme="/categories/WordPress/"/>
    
    
      <category term="WP插件" scheme="/tags/WP%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Sakura JS樱花特效</title>
    <link href="/2019/08/25/sakura-js/"/>
    <id>/2019/08/25/sakura-js/</id>
    <published>2019-08-25T05:07:01.000Z</published>
    <updated>2019-09-09T15:23:14.136Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:heading {"level":3} --><h3>前言：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>emmm，之前在我博客上面放上去了这个 Sakura JS樱花特效 ，最近很多小伙伴都比较喜欢这个特效，今天我就直接把代码分享给大家。省得F12了 </p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>效果：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>如果在我博客是可以直接看到的 </p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/25/pic15bc4a8.png" alt="JS樱花特效" border="0"><!-- /wp:html --><!-- wp:heading {"level":3} --><h3>地址</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li><a href="https://yremp.live/wp-content/uploads/resource/js/sakura.js" target="_blank" rel="noopener">地址1</a></li><li><a href="https://cdn.jsdelivr.net/gh/yremp/yremp-js@1.5/sakura.js" target="_blank" rel="noopener">地址2</a></li></ol><!-- /wp:list --><!-- wp:paragraph --><p>这是一个JavaScript文件，你可以直接使用外链引用，第一个地址是放在我的服务器上的，第二个是Jsdelivr 缓存的地址。推荐使用第二个地址，理论上永久有效。</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      emmm，之前在我博客上面放上去了这个 JS樱花特效 ，最近很多小伙伴都比较喜欢这个特效，今天我就直接把代码分享给大家。省得去浏览器F12了。
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WordPress 自动采集插件WP-AutoBlog</title>
    <link href="/2019/08/24/wp-autoblog/"/>
    <id>/2019/08/24/wp-autoblog/</id>
    <published>2019-08-24T11:07:01.000Z</published>
    <updated>2019-09-09T15:19:00.097Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:heading {"level":3} --><h3>前言：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>在我们采集资源时，手动复制粘贴还是很麻烦的。然后我发现了 <strong>WP-AutoBlog</strong>  这款自动采集插件，在配置参数后，它就会帮我们采集相应的资源。非常方便。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>下载：</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>官方下载：<a href="https://wp-autoblog.net/zh" target="_blank" rel="noopener">下载地址</a></li><li>旧版Pro ：<a href="https://yremp.live/wp-content/uploads/plugins/wp-autopost-pro.zip" target="_blank" rel="noopener">下载地址</a></li></ol><!-- /wp:list --><!-- wp:paragraph --><p>现在官方提供新版本的 <strong>WP-AutoBlog 免费版</strong>，采集后会放入原文链接以及其他功能限制，Pro版可以去掉。<strong>旧版Pro破解版</strong>无功能限制，可以提供免费下载，有兴趣可以都下载，二者可以同时使用。<strong>商用请支持官方正版，破解版仅提供学习交流使用。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p></p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>基本介绍</h3><!-- /wp:heading --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">以旧版Pro为例</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>任务设置</h4><!-- /wp:heading --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/24/cover06e396f.png" alt="WP-AutoBlog" border="0"><!-- /wp:html --><!-- wp:heading {"level":4} --><h4>任务基本设置</h4><!-- /wp:heading --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/24/cover07d34c6.png" alt="WP-AutoBlog" border="0"><!-- /wp:html --><!-- wp:heading {"level":4} --><h4>文章来源设置</h4><!-- /wp:heading --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/24/cover081b9f1.png" alt="cover081b9f1.png" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>以上就是这款插件基本信息，建议安装后自己使用一下，整个操作还是比较简单的。</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      WP-AutoBlog 这款自动采集插件，在配置参数后，它就会帮我们采集相应的资源。启用任务后，定时检测是否有新文章可更新，检测文章是否重复，导入更新文章，这一切操作程序都是全自动完成，无需人工干预。有两种触发采集更新方式，一种是在页面内添加代码由用户访问触发采集更新(后台异步进行。
    
    </summary>
    
    
      <category term="WordPress" scheme="/categories/WordPress/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>WordPress接入QQ登录</title>
    <link href="/2019/08/21/wordpress-contact-qq/"/>
    <id>/2019/08/21/wordpress-contact-qq/</id>
    <published>2019-08-21T15:34:01.000Z</published>
    <updated>2019-09-09T15:16:43.227Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>在使用wordpress过程中用户登录注册是比较让人头疼的，传统的登录注册往往会劝退一部分用户，这对我们来说是很难接受的。但是如果可以接入像QQ、微博等比较广泛的社交账号，那么用户很轻松就可以登录，省去注册的繁琐过程，有利于用户的体验。接下来就给大家带来使用 WordPress接入QQ登录 教程 。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>补充，如果网站没有备案号，那么无法接入QQ。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>流程介绍</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>去QQ互联登录注册并提交开发者申请。</li><li>创建Web应用并提交审核</li><li>在WordPress插件中心安装<strong>Wechat Social</strong></li><li>填写APP ID 和APP KEY</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>Step 1： 申请开发者账号</h3><!-- /wp:heading --><!-- wp:paragraph --><p>去<a href="https://connect.qq.com/" target="_blank" rel="noopener">QQ互联官方</a>提交开发者资料（注意在提交开发者资料时，名称后面写自己的姓名，第一次申请被坑了），提交之后大概需要1-3天的审核时间。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 2 ：创建Web应用</h3><!-- /wp:heading --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/21/cover01a1e3a.png" alt="wordpress接入QQ登录" border="0"><!-- /wp:html --><!-- wp:list {"ordered":true} --><ol><li>网站地址：就填你的主页地址就好。</li><li>回调地址在 <strong>Wechat Social</strong> 插件的QQ模块中会给定。</li><li>提供方：个人理解应该可以随便写</li><li>备案号：网站备案号，必填。</li><li>上传logo</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>Step 3：接入QQ登录</h3><!-- /wp:heading --><!-- wp:paragraph --><p>等待应用审核完成后，在QQ互联中查看我们申请到的APP ID 、APP KEY</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/21/cover036f17c.png" alt="wordpress接入QQ登录" border="0"><!-- /wp:html --><!-- wp:paragraph --><p> 下载并开启<strong>Wechat Social</strong> 插件，在设置中找到QQ相关设置，把 APP ID 、APP KEY 填入</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/21/cover02b065d.png" alt="wordpress接入QQ登录" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>基本上已经大功告成，如果你不喜欢原来的登录注册界面就可以在页面设置中，禁用WP默认的界面，使用这个插件自带的登录注册界面，对第三方登录接入的适配也比较合适。下面就是这个插件为我们提供的登录页面。</p><!-- /wp:paragraph --><!-- wp:html --><p><a href="https://www.yremp.live/image/0nQL" target="_blank" rel="noopener"><img src="https://www.yremp.live/images/2019/08/21/cover045fd2e.png" alt="wordpress接入QQ登录" border="0"></a></p><!-- /wp:html -->]]></content>
    
    <summary type="html">
    
      在使用wordpress过程中用户登录注册是比较让人头疼的，传统的登录注册往往会劝退一部分用户，这对我们来说是很难接受的。但是如果可以接入像QQ、微博等比较广泛的社交账号，那么用户很轻松就可以登录，省去注册的繁琐过程，有利于用户的体验。接下来就给大家带来使用 WordPress接入QQ登录 教程 。
    
    </summary>
    
    
      <category term="WordPress" scheme="/categories/WordPress/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Jsproxy 通过JS实现浏览器在线代理</title>
    <link href="/2019/08/19/jsproxy/"/>
    <id>/2019/08/19/jsproxy/</id>
    <published>2019-08-19T04:16:01.000Z</published>
    <updated>2019-09-09T15:10:15.066Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>最近群里的小伙伴推荐了 jsproxy +cloudflare 实现浏览器的在线代理，去操作了一波之后发现，真香 。全部都是免费，并且是傻瓜式操作，关键是速度还不错，如果你需要访问google、维基百科等网站查询资料，我觉得这是一个不错的选择。专门写博客记录一下。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Jsproxy地址</h3><!-- /wp:heading --><!-- wp:list --><ul><li><strong><a href="https://github.com/EtherDream/jsproxy" target="_blank" rel="noopener">github地址</a></strong></li></ul><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>准备工作：</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li> Cloudflare&nbsp; 账号。</li><li>跟着教程往下走。   </li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>开始操作：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>1.登录到 <a href="https://dash.cloudflare.com" target="_blank" rel="noopener">Cloudflare 官网</a>，没有账号也可以直接注册</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>2.登录完成后，点击 Get started with Workers ，设置用户名</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/19/pic1404a5f.png" alt="pic1404a5f.png" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>3.复制  <a href="https://raw.githubusercontent.com/EtherDream/jsproxy/master/cf-worker/index.js" target="_blank" rel="noopener">https://raw.githubusercontent.com/EtherDream/jsproxy/master/cf-worker/index.js</a> 的内容到Script框中</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/19/PICf12a1.png" alt="PICf12a1.png" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>4.填写域名信息 例如example.searcher.workers.dev其中</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>example 这个是可以任意修改</li><li>searcher 是第二步的时候设置的，相当于用户名</li><li>workers.dev 这是 Cloudflare 的固定格式</li></ol><!-- /wp:list --><!-- wp:paragraph --><p>5.Save and Deploy ,可能会有红色的错误提示信息，不用管。此时访问<a href="https://example.searcher.workers.dev " target="_blank" rel="noopener">https://example.searcher.workers.dev </a>就可以啦</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>补充一点，使用  Jsproxy+Cloudflare 可以流畅的访问youtube等网站，但是有可能无法访问google，本人测试使用Github Page +  Jsproxy 可以正常<a href="https://yremp2.github.io/" target="_blank" rel="noopener">访问google</a>，但是速度较慢。</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      最近群里的小伙伴推荐了 jsproxy +cloudflare 实现浏览器的在线代理，去操作了一波之后发现，真香 。全部都是免费，并且是傻瓜式操作，关键是速度还不错，如果你需要访问google、维基百科等网站查询资料，我觉得这是一个不错的选择。专门写博客记录一下。
    
    </summary>
    
    
      <category term="代理" scheme="/categories/%E4%BB%A3%E7%90%86/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>WordPress安装教程</title>
    <link href="/2019/08/18/install-wordpress/"/>
    <id>/2019/08/18/install-wordpress/</id>
    <published>2019-08-18T04:16:01.000Z</published>
    <updated>2019-09-09T15:05:54.460Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p> WordPress安装教程 ，Linux 服务器安装wordpress 需要以下运行环境</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>PHP </li><li>Mysql数据库（也可以是其他数据库）</li><li>Apache 或者 Nginx  等Web服务器</li></ol><!-- /wp:list --><!-- wp:paragraph --><p>并且快速使用WordPress搭建博客或者网站有两种方式</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>在购买服务器时安装WordPress应用镜像。</li><li>安装宝塔面板，在宝塔面板里可视化操作，自己一键安装运行环境。</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>1.预装WordPress应用镜像</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>大概步骤</h4><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li> 在腾讯云或者阿里云等云服务商的服务器都是可以选择服务器系统镜像和应用镜像，这种方式是最简单的安装WordPress的方式，你只需要选择好配置，系统自动为你配置好WordPress环境，并且立刻可以使用。</li><li>在预装好镜像以后，通过访问公网ip就可以看到系统为我们装好的WordPress站点，一般需要我们设置管理员账号，等等 </li><li>在完成这些步骤后，就可以去主题中心安装自己心仪的主题，并且推荐一些ftp工具  FlashFXP 5、MobaXterm 等管理服务器文件。当然要设置SSH root账号才能使用。</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>2.安装宝塔面板，一键安装WordPress</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>Step 1 ：准备工作</h4><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>既然通过安装宝塔面板来自己安装WordPress运行环境，那么对应用镜像就可以随便选择，或者说没有特别的要求，系统镜像可以选择 Centos 、 Ubuntu 或者 Debian 等主流系统。</li><li>在配置完成后可以设置SSH root账号密码，然后通过各种终端工具，或者服务商提供的在线终端工具连接到服务器。通过命令安装宝塔面板。</li></ol><!-- /wp:list --><!-- wp:heading {"level":4} --><h4>Step 2：开始安装</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在连接到服务器的终端执行安装脚本，不同Linux系统 有所区别：</p><!-- /wp:paragraph --><!-- wp:paragraph --><p> Centos  安装脚本 ：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</code></pre><!-- /wp:code --><!-- wp:paragraph --><p> Ubuntu/Deepin安装脚本 ：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</code></pre><!-- /wp:code --><!-- wp:paragraph --><p> Debian安装脚本 ：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>其他系统请参考<a href="https://www.bt.cn/download/linux.html" target="_blank" rel="noopener">官方说明</a></p><!-- /wp:paragraph --><!-- wp:paragraph --><p>在安装时可能需要确认一下，屏幕上会有提示。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>Step 3：安装WordPress运行环境</h4><!-- /wp:heading --><!-- wp:paragraph --><p> 1.  在安装完成后一般 屏幕上会给出宝塔面板访问地址，一般是  <strong>服务器公网ip:888</strong>8 默认的账号和密码也会给出。接下来就是访问宝塔面板，登入宝塔面板。 </p><!-- /wp:paragraph --><!-- wp:paragraph --><p>2.在软件管理的运行环境下选择安装WordPress的运行环境，这里以PHP7.0、Nginx1.14、MySQL 5.7为例，如下图配置：</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/18/pic08364ba.png" alt="WordPress安装教程" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>3.在首页选择宝塔一键部署源码，在里面选择WordPress</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/18/pic10a8cd2.png" alt="WordPress安装教程" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>其中：</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>网站域名：如果有自己的域名就填自己的域名，没有则填写服务器公网ip</li><li>网站备注：随意</li><li>网站目录：当你填写域名后默认是www/wwwroot/域名，可以修改</li><li>网站FTP ：可以不创建</li><li>数据库    ：例如wordpress </li><li>数据库密码：例如123456 </li></ol><!-- /wp:list --><!-- wp:paragraph --><p>4.配置WordPress,按照示例即可</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/18/pic111b6ad.png" alt="WordPress安装教程" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>5.通过域名（需要到域名服务商解析）或者IP访问站点，配置站点信息和管理员账号</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/18/pic124ddf7.png" alt="WordPress安装教程" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>6.大功告成！</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/18/pic13042a2.png" alt="WordPress安装教程" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>这是比较简单的两种安装wordpress方式，手动配置全部环境不打算介绍了。如果要写的话可能比较多。有任何问题都可以到留言板留言或者QQ联系我。</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      WordPress安装教程 -首先 Linux 服务器安装wordpress 需要以下运行环境，1.PHP 2.Mysql数据库（也可以是其他数据库）3.Apache 或者 Nginx 等Web服务器 .并且快速使用WordPress搭建博客或者网站有两种方式，1.在购买服务器时安装WordPress应用镜像。2.安装宝塔面板，在宝塔面板里可视化操作，自己一键安装运行环境。
    
    </summary>
    
    
      <category term="WordPress" scheme="/categories/WordPress/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Hexo更换主题</title>
    <link href="/2019/08/18/hexo-theme/"/>
    <id>/2019/08/18/hexo-theme/</id>
    <published>2019-08-18T02:16:01.000Z</published>
    <updated>2019-09-09T15:00:20.337Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>当我们安装完Hexo后，系统默认为我们设置了landscape主题，其实这款主题还是不错的，很简洁 。但是如何更换主题呢？接下来就为大家带来       Hexo更换主题 的教程。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 1：下载主题</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4> 1.点击<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题中心</a>，找到适合自己的主题。</h4><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4> 2.点击主题名称，进入github仓库</h4><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>3.下载主题</h4><!-- /wp:heading --><!-- wp:paragraph --><p>下载方式有两种</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li>git clone 命令下载</li><li>直接下载压缩包</li></ol><!-- /wp:list --><!-- wp:paragraph --><p>新手推荐下载压缩包</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/18/pic0568947.png"><!-- /wp:html --><!-- wp:heading {"level":3} --><h3>Step 2：修改主题</h3><!-- /wp:heading --><!-- wp:paragraph --><p>下载完成后，解压文件，把主题文件重命名为theme（名字是随意的，可以不重命名，但是一般默认名称比较长，后面填主题名称不方便）。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>把这个文件放到 <strong>博客根目录/themes/ 下面</strong> ，例如：</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/18/pic064fb41.png" alt="pic064fb41.png" border="0"><!-- /wp:html --><!-- wp:paragraph --><p>然后在博客根目录下 找到<strong>  _config.yml</strong> 这个配置文件并打开，找到：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code># Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo:     github: https://github.com/yremp/yremp.github.io.git    coding: git@git.dev.tencent.com:yremp/yremp.coding.me.git  branch: master</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>将theme： landscape 修改为  theme： theme （注意冒号后面必须有一个空格） ，修改后如下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code># Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: theme# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo:     github: https://github.com/yremp/yremp.github.io.git    coding: git@git.dev.tencent.com:yremp/yremp.coding.me.git  branch: master</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>然后依次执行：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo clean //这个命令一般在修改配置文件后才需要执行hexo ghexo d</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>就可以看到更换后的主题了 </p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/18/pic07c7211.png" alt="Hexo 更换主题" border="0"><!-- /wp:html -->]]></content>
    
    <summary type="html">
    
      当我们安装完Hexo后，系统默认为我们设置了landscape主题，其实这款主题还是不错的，很简洁 。但是如何更换主题呢？接下来就为大家带来 Hexo更换主题 的教程。
    
    </summary>
    
    
      <category term="Hexo" scheme="/categories/Hexo/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Hexo编写上传文章</title>
    <link href="/2019/08/16/hexo-upload/"/>
    <id>/2019/08/16/hexo-upload/</id>
    <published>2019-08-16T02:16:01.000Z</published>
    <updated>2019-09-09T15:01:06.612Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>之前写了hexo安装教程，很多人在搭建完自己的hexo博客后，却又不知道如何写博客、上传博文。今天给刚入门的新手分享一下 Hexo编写上传文章教程 。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 1：写博客</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>概要</h4><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li> 首先，你需要了解markdown语法，如果不了解可以百度<a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=markdown%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener">markdown语法</a> 。</li><li>参考主题默认文章 Hello Word，不同的Hexo主题对md文件格式可能不一样。</li><li>下载一个编辑器，推荐vscode（轻量、可拓展性强）。也可以使用我的<a href="https://desktop.yremp.live/" target="_blank" rel="noopener">云桌面</a>可视化编辑md文件  。</li></ol><!-- /wp:list --><!-- wp:paragraph --><p>首先让我们看看在安装hexo默认主题landscape的默认文章</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>---title: Hello World---Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).## Quick Start### Create a new post``` bash$ hexo new "My New Post"```More info: [Writing](https://hexo.io/docs/writing.html)### Run server``` bash$ hexo server```More info: [Server](https://hexo.io/docs/server.html)### Generate static files``` bash$ hexo generate```More info: [Generating](https://hexo.io/docs/generating.html)### Deploy to remote sites``` bash$ hexo deploy```More info: [Deployment](https://hexo.io/docs/deployment.html)</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>我们只需要新建一个hello-word2.md文件，把文档前面的一部分copy来：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>---title: Hello World---</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>title 就是博客文章的标题，然后我们写一个Hello World2，并且写一点内容</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>---title: Hello World2---### 你好这是我的第一篇博客</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>Step 2：上传到Github</h3><!-- /wp:heading --><!-- wp:paragraph --><p>然后把这个文件放到 博客根目录下的 <strong>\source\_posts</strong> 下，然后依次执行</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo ghexo d</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>就可以看到我们的文章了</p><!-- /wp:paragraph --><!-- wp:html --><img src="https://www.yremp.live/images/2019/08/18/pic02b70eb.png"><!-- /wp:html --><!-- wp:heading {"level":3} -->]]></content>
    
    <summary type="html">
    
      之前写了hexo安装教程，很多人在搭建完自己的hexo博客后，却又不知道如何写博客、上传博文。今天给刚入门的新手分享一下 Hexo编写上传文章 的教程。
    
    </summary>
    
    
      <category term="Hexo" scheme="/categories/Hexo/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>最近搭了一个图床</title>
    <link href="/2019/08/12/images/"/>
    <id>/2019/08/12/images/</id>
    <published>2019-08-12T02:16:01.000Z</published>
    <updated>2019-09-08T16:06:01.084Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:list {"ordered":true} --><ol><li> 最近搭了一个图床，欢迎大家使用</li><li>这是一个基于免费版的<a href="https://github.com/Chevereto" target="_blank" rel="noopener">Chevereto</a>搭建的图床，有兴趣的可以直接去看<strong><a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="noopener">Chevereto-Free</a></strong>，不建议大家使用  Chevereto的破解版，风险比较大。免费版已经很强大了，大部分功能都能正常使用。 </li></ol><!-- /wp:list --><!-- wp:paragraph --><p> <a href="https://www.yremp.live" target="_blank" rel="noopener">图床地址</a>：https://www.yremp.live</p><!-- /wp:paragraph --><!-- wp:paragraph {"align":"left"} --><p style="text-align:left">    图床对我们写博客解决插图是有很大帮组的，之前玩hexo时图片放github加载速度是比较慢的，后来使用jsdelivr加速会好一点，但是还是不够理想。所以很长一段时间我都在思考，如何搭建一个自己的图床，后来无意间发现了 <strong><a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="noopener">Chevereto-Free</a></strong> ，发现这个程序很适合我，于是去网上找了很多教程，花费了一天时间把网站重构了一下，顺利搭建了我的图床。</p><!-- /wp:paragraph --><p><img src="https://www.yremp.live/images/2019/08/12/VioletEvergardenc19ea.md.jpg" alt>]</p><!-- wp:gallery --><ul class="wp-block-gallery columns-0 is-cropped"></ul><!-- /wp:gallery -->]]></content>
    
    <summary type="html">
    
      最近搭建了一个图床，图床地址：https://www.yremp.live ,欢迎大家使用。
    
    </summary>
    
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 社区项目</title>
    <link href="/2019/08/06/spring-boot-community/"/>
    <id>/2019/08/06/spring-boot-community/</id>
    <published>2019-08-06T10:16:01.000Z</published>
    <updated>2019-09-09T15:45:50.402Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:heading {"level":3} --><h3 id="1-图片预览："><a href="#1-图片预览：" class="headerlink" title="1.图片预览："></a>1.图片预览：</h3><h4 id="1-主页"><a href="#1-主页" class="headerlink" title="1.主页"></a>1.主页</h4><p><img src="http://yremp.hk.ufileos.com/38ae6d89-5de4-44c3-8ee9-703c962432cd.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=q2oyg%2BotvDmb6IjT3NR%2F72XuH68%3D&Expires=1880288397" alt></p><h4 id="2-帖子详情"><a href="#2-帖子详情" class="headerlink" title="2.帖子详情"></a>2.帖子详情</h4><p><img src="http://yremp.hk.ufileos.com/bdf1cbab-1be6-4dfc-af2f-ff57064b0199.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=azCuVUGOxEUj3%2FZ4sEAZcfr1hg0%3D&Expires=1880288722" alt></p><h4 id="3-回复和评论"><a href="#3-回复和评论" class="headerlink" title="3.回复和评论"></a>3.回复和评论</h4><p><img src="http://yremp.hk.ufileos.com/75665e02-252f-4295-82da-a174d5430fc3.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=G2FIXPULPGAef0EzgYTJTMkBzac%3D&Expires=1880288840" alt></p><h4 id="4-个人资料"><a href="#4-个人资料" class="headerlink" title="4.个人资料"></a>4.个人资料</h4><p><img src="http://yremp.hk.ufileos.com/9f34b6fc-6280-4f06-b532-811fddcf8af1.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=0McqMH40VePPvAzurjIBcDszH9U%3D&Expires=1880288973" alt><br><img src="http://yremp.hk.ufileos.com/1887c95d-f645-46df-97b2-53166a3a6cf4.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=AFayW12hx1W7kjiY09EIv3fOa6M%3D&Expires=1880288990" alt><br><img src="http://yremp.hk.ufileos.com/1dbff5ae-f910-4234-b3c9-01ec481b1522.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=WemP%2FVVBLhBJkkKjlDlTT4E3t5s%3D&Expires=1880289014" alt><br><img src="http://yremp.hk.ufileos.com/2bb452c7-ee07-4b69-aad7-8fbb28994e07.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=LOcBj1T8uT%2FXdFMWQC2MzAmGFU8%3D&Expires=1880289025" alt></p><h4 id="公共资料面板"><a href="#公共资料面板" class="headerlink" title="公共资料面板"></a>公共资料面板</h4><p><img src="http://yremp.hk.ufileos.com/6198ce14-398e-4e63-bfc8-5606806fc1f1.png?UCloudPublicKey=TOKEN_c8840aa4-b6d1-4b64-b8d0-4f759247250b&Signature=9oZv9wbnJ6mDiIhBk1AY06v0DHs%3D&Expires=1880289942" alt></p><h4 id="个人资料的前端页面还有很大修改的空间"><a href="#个人资料的前端页面还有很大修改的空间" class="headerlink" title="个人资料的前端页面还有很大修改的空间"></a>个人资料的前端页面还有很大修改的空间</h4><h3>2.项目地址：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>话不多说，先给出项目地址。</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li><a href="https://github.com/yremp/community" target="_blank" rel="noopener">Github 地址</a></li><li><a href="http://www.yremp.live:1234/" target="_blank" rel="noopener">在线预览地址</a></li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>3.项目核心：</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>接入github，使用户可以直接使用github账号登录。</li><li>集成<a href="https://github.com/yremp/editormd" target="_blank" rel="noopener">editormd</a>插件，实现markdown语法编辑并显示为html。</li><li>在editormd中使用ucloud上传图片。</li><li>数据库查询分页。</li><li>使用ajax提交请求，实现二级评论的加载。</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>4.核心代码</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>1.Github登录相关</h4><!-- /wp:heading --><!-- wp:paragraph --><p>1.编写AccessTokenDTO.class 用于github access_token</p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">    private String client_id;    private String client_secret;    private String code;    private String redirect_uri;    private String state;    public String getClient_id() {        return client_id;    }    public void setClient_id(String client_id) {        this.client_id = client_id;    }    public String getClient_secret() {        return client_secret;    }    public void setClient_secret(String client_secret) {        this.client_secret = client_secret;    }    public String getCode() {        return code;    }    public void setCode(String code) {        this.code = code;    }    public String getRedirect_uri() {        return redirect_uri;    }    public void setRedirect_uri(String redirect_uri) {        this.redirect_uri = redirect_uri;    }    public String getState() {        return state;    }    public void setState(String state) {        this.state = state;    }}</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>2.编写GithubProvider.class:调用github官方给出的 OAuth Apps api，实现Github登录 </p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">@Componentpublic class GithubProvider {    public String getAccessToken(AccessTokenDTO accessTokenDto){        MediaType mediaType                = MediaType.get(&quot;application/json; charset=utf-8&quot;);        OkHttpClient client = new OkHttpClient();            RequestBody body = RequestBody.create(mediaType,JSON.toJSONString(accessTokenDto));            Request request = new Request.Builder()                    .url(&quot;https://github.com/login/oauth/access_token&quot;)                    .post(body)                    .build();            try (Response response = client.newCall(request).execute()) {               String string =response.body().string();               String access_token=string.split(&quot;&amp;amp;&quot;)[0].split(&quot;=&quot;)[1];                return access_token;            }catch (Exception e)            {                e.printStackTrace();            }        return null;    }    public GithubUserDTO getGithubUser(String accessToken) {        OkHttpClient client = new OkHttpClient();        Request request = new Request.Builder()                .url(&quot;https://api.github.com/user?access_token=&quot; + accessToken)                .build();        try {            Response response = client.newCall(request).execute();            String string = response.body().string();            GithubUserDTO githubUserDTO = JSON.parseObject(string, GithubUserDTO.class);            return githubUserDTO;        } catch (IOException e) {            return null;        }    }      }</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>Controller中调用GithubProvider获取用户数据并写入数据库</p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">@Controllerpublic class AuthorizeController {    @Autowired    private GithubProvider githubProvider = null;    @Autowired    private UserService userService = null;    @Value(&quot;${github.client.id}&quot;)    private String clientID;    @Value(&quot;${github.client.secret}&quot;)    private String clientSC;    @Value(&quot;${github.redirect.url}&quot;)    private String redirectURL;    @Autowired    QuesDtoService quesDtoService;    @RequestMapping(&quot;/callback&quot;)    public String callback(@RequestParam(name = &quot;code&quot;) String code,                           @RequestParam(name = &quot;state&quot;) String state,                           HttpServletResponse response,                           HttpServletRequest request) {        AccessTokenDTO accessTokenDto = new AccessTokenDTO();        accessTokenDto.setCode(code);        accessTokenDto.setState(state);        accessTokenDto.setClient_id(clientID);        accessTokenDto.setClient_secret(clientSC);        accessTokenDto.setRedirect_uri(redirectURL);        String accesstaken = githubProvider.getAccessToken(accessTokenDto);        GithubUserDTO githubUserDTO = githubProvider.getGithubUser(accesstaken);        if (githubUserDTO != null) {            User user1 = null;            String token = UUID.randomUUID().toString();            try {                user1 = userService.findByGithubId(String.valueOf(githubUserDTO.getId()));                if (user1 != null) {                    response.addCookie(new Cookie(&quot;token&quot;, token));                    user1.setUser_token(token);                    userService.upTokenById(token, user1.getUser_id());                } else {                    User user = new User();                    user.setUser_token(token);                    user.setUser_name(githubUserDTO.getName());                    user.setAccount_id(String.valueOf(githubUserDTO.getId()));                    user.setGmt_create(System.currentTimeMillis());                    user.setGmt_modified(user.getGmt_create());                    user.setUser_img(githubUserDTO.getAvatarUrl());                    user.setUser_bio(githubUserDTO.getBio());                    user.setUser_blog(githubUserDTO.getBlog());                    user.setUser_github(githubUserDTO.getHtml_url());                    userService.Insert(user);                    request.getSession().setAttribute(&quot;user&quot;, user);                    response.addCookie(new Cookie(&quot;token&quot;, token));                }            } catch (Exception w) {            }            return &quot;redirect:/&quot;;        } else {            return &quot;redirect:/&quot;;        }    }</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>2.Ucloud  <strong>对象存储 UFile</strong> </h4><!-- /wp:heading --><!-- wp:paragraph --><p> 1.UcloudProvider.class:</p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">//ucloud上传文件@Servicepublic class UcloudProvider {    private String buckname = &quot;yremp&quot;;    @Value(&quot;${ucloud.publickey}&quot;)    private String publickey;    @Value(&quot;${ucloud.privatekey}&quot;)    private String privatekey;    public String upload(InputStream fileStream, String mimeType, String filename) {        String fileName;        String[] FilleName = filename.split(&quot;\\.&quot;);        if (FilleName.length &gt; 1) {            fileName = UUID.randomUUID().toString() + &quot;.&quot; + FilleName[FilleName.length - 1];        } else {            return null;        }        try {            //    授权            ObjectAuthorization OBJECT_AUTHORIZER = new UfileObjectLocalAuthorization(publickey, privatekey);            //    配置            ObjectConfig config = new ObjectConfig(&quot;hk&quot;, &quot;ufileos.com&quot;);            PutObjectResultBean response = UfileClient.object(OBJECT_AUTHORIZER, config)                    .putObject(fileStream, mimeType)                    .nameAs(fileName)                    .toBucket(buckname)                    .setOnProgressListener(new OnProgressListener() {                        @Override                        public void onProgress(long bytesWritten, long contentLength) {                        }                    })                    .execute();            if (response != null &amp;amp;&amp;amp; response.getRetCode() == 0) {                String url = UfileClient.object(OBJECT_AUTHORIZER, config)                        .getDownloadUrlFromPrivateBucket(fileName, buckname, 24 * 60 * 60 * 365 *10)                        .createUrl();                return url;            } else {                throw new PeculiarException(PeculiarExceptionCodeAndMessage.FILE_UPLOAD_ERROR);            }        } catch (UfileClientException e) {            throw new PeculiarException(PeculiarExceptionCodeAndMessage.FILE_UPLOAD_ERROR);        } catch (UfileServerException e) {            throw new PeculiarException(PeculiarExceptionCodeAndMessage.FILE_UPLOAD_ERROR);        }    }}</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>2.前端请求后调用UcloudProvider</p><!-- /wp:paragraph --><!-- wp:code --><pre><code class="java">@Controllerpublic class FileUploadController {    private String fileurl;    @Autowired    private UcloudProvider ucloudProvider;    @RequestMapping(&quot;/file/upload&quot;)    @ResponseBody    public FileDTO upload(HttpServletRequest request){        MultipartHttpServletRequest multipartHttpServletRequest=(MultipartHttpServletRequest) request;        MultipartFile file = multipartHttpServletRequest.getFile(&quot;editormd-image-file&quot;);        try {          //ucloudProvider 拿到文件url          String fileurl=  ucloudProvider.upload(file.getInputStream(),file.getContentType(),file.getOriginalFilename());            FileDTO fileDTO = new FileDTO();            fileDTO.setSuccess(1);            fileDTO.setMessage(&quot;成功&quot;);            fileDTO.setUrl(fileurl);            return fileDTO;        } catch (Exception e) {            e.printStackTrace();        }        FileDTO fileDTO = new FileDTO();        fileDTO.setSuccess(1);        fileDTO.setMessage(&quot;成功&quot;);        fileDTO.setUrl(fileurl);        return fileDTO;    }}</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>3.其他</h4><!-- /wp:heading --><!-- wp:paragraph --><p>至于集成editormd、数据库分页、和ajax 的简单使用感觉比较简单，教程也很多就不细说。</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      使用Spring Boot 开发的交流社区项目，项目特点是接入了github登录，支持markdown语法编辑，回复评论通知等功能。
    
    </summary>
    
    
      <category term="Java" scheme="/categories/Java/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 文件上传</title>
    <link href="/2019/07/26/spring-boot-fileupload/"/>
    <id>/2019/07/26/spring-boot-fileupload/</id>
    <published>2019-07-26T10:16:01.000Z</published>
    <updated>2019-09-09T15:47:33.509Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>在Spring Boot 项目中如何上传文件，今天在这里分享一下。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 1：前端准备：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>fileupload.html,一个简单的表单：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>    &lt;meta charset="UTF-8">    &lt;title>Title&lt;/title>&lt;/head>&lt;body>&lt;form action="/upload" method="post"  enctype="multipart/form-data">    &lt;input type="file" id="photo" name="photo">    &lt;input type="submit">&lt;/form>&lt;/body>&lt;/html></code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>Step2：application.properties配置</h3><!-- /wp:heading --><!-- wp:paragraph --><p>application.properties配置文件中如下配置：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>#临时目录文件夹spring.servlet.multipart.location=f:/temp/#自定义文件保存目录app.upload.path=f:upload/#单个文件上传最大大小spring.servlet.multipart.max-file-size=10MB#单个请求最大上传大小spring.servlet.multipart.max-request-size=50MB</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>Step 3：后台Controller：</h3><!-- /wp:heading --><!-- wp:code --><pre><code class="java">@Controllerpublic class FileUploadController {//   返回文件上传界面    @RequestMapping(&quot;/&quot;)    public String index(){        return &quot;fileupload&quot;;    }//    使用配置文件中自定义文件保存路径@Value(&quot;${app.upload.path}&quot;)    private String path=null;    @PostMapping(&quot;/upload&quot;)//    MultipartFile是上传文件接口，对应保存临时文件//    参数名要和前端name属性保持一致    public ModelAndView upload(@RequestParam(&quot;photo&quot;) MultipartFile photo) throws IOException {//        文件保存的路径//        String path=&quot;f:/upload/&quot;;//        文件使用原有名称命名//        String filename=photo.getOriginalFilename();//        文件使用上传的时间命名        String filename=new SimpleDateFormat(&quot;yyyyMMddHHmmssSSS&quot;).format(new Date());//        文件扩展名        String suffix=  photo.getOriginalFilename().substring(photo.getOriginalFilename().lastIndexOf(&quot;.&quot;));//        限制上传的文件类型        if(!suffix.equals(&quot;.jpg&quot;)){            throw  new RuntimeException(&quot;图片格式错误&quot;);        }//        Spring 提供了一个文件操作类FileCopyUtils        FileCopyUtils.copy(photo.getInputStream(),new FileOutputStream(path+filename+suffix));        return null;    }}</code></pre><!-- /wp:code --><!-- wp:paragraph --><p></p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      在Spring Boot 项目中如何上传文件，今天在这里分享一下。
    
    </summary>
    
    
      <category term="Java" scheme="/categories/Java/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot SpringMVC常用的设置上下文方式</title>
    <link href="/2019/07/25/spring-boot-context/"/>
    <id>/2019/07/25/spring-boot-context/</id>
    <published>2019-07-25T10:16:01.000Z</published>
    <updated>2019-09-09T15:47:06.639Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:paragraph --><p>在学习Spring Boot中，SpringMVC常用的设置上下文方式如下：</p><!-- /wp:paragraph --><!-- wp:paragraph --><p> 首先看一下前端booklist.html： </p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>                    &lt;thead>                    &lt;tr>                        &lt;th>ID&lt;/th>                        &lt;th>书名&lt;/th>                        &lt;th>作者&lt;/th>                        &lt;th>价格&lt;/th>                        &lt;th>操作&lt;/th>                    &lt;/tr>                    &lt;/thead>                    &lt;tbody>                    &lt;tr th:each="book : ${books}">                        &lt;td th:text="${book.id}">&lt;/td>                        &lt;td th:text="${book.name}">&lt;/td>                        &lt;td th:text="${book.author}">&lt;/td>                        &lt;td th:text="${book.price}">&lt;/td>                    &lt;/tr>                    &lt;/tbody></code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>1.ModelAndView</h3><!-- /wp:heading --><!-- wp:paragraph --><p></p><!-- /wp:paragraph --><!-- wp:paragraph --><p>使用方法如下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>@RequestMapping("/book")    public ModelAndView queryAll(){        List&lt;Book> books =bookDao.selectAll();        ModelAndView modelAndView =new ModelAndView("booklist");        modelAndView.addObject("books",books);        return  modelAndView;    }</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color"> 1、高内聚低耦合原则。实质上上设计的函数尽量不带参数，便于不同系统间调用时更简单。 推荐使用ModelAndView， ModelAndView实质上是map，和web容器没有关系。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>2.Model</h3><!-- /wp:heading --><!-- wp:paragraph --><p>使用方法如下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>@RequestMapping("/book")public String queryAll(Model model){     List&lt;Book> books =bookDao.selectAll();     model.addAttribute("books" ,books);     return "booklist"; }</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>SpringMVC会自动创建Model对象，但是在一些特殊情况下需要手动创建对象。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>3.HttpServletRequest</h3><!-- /wp:heading --><!-- wp:paragraph --><p>使用方法如下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code> @RequestMapping("/book")    public String queryAll(HttpServletRequest request){        List&lt;Book> books =bookDao.selectAll();       request.setAttribute("books",books);        return  "booklist";    }</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>4.WebRequest</h3><!-- /wp:heading --><!-- wp:paragraph --><p>使用方法如下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>     @RequestMapping("/book")    public String queryAll(WebRequest webRequest){        List&lt;Book> books =bookDao.selectAll();       webRequest.setAttribute("books",books,WebRequest.SCOPE_REQUEST);        return  "booklist";    }</code></pre><!-- /wp:code --><!-- wp:paragraph {"ampFitText":true} --><p><amp-fit-text layout="fixed-height" min-font-size="6" max-font-size="72" height="80">WebRequest和HttpServletRequest这两种方法 和WEB容器强耦合, 不利于 更换容器或者扩展。不建议这两种方式 </amp-fit-text></p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      在学习Spring Boot中，SpringMVC常用的设置上下文方式如下：1.ModelAndView ,2.Model , 3.HttpServletRequest, 4.WebRequest
    
    </summary>
    
    
      <category term="Java" scheme="/categories/Java/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Thymeleaf模板引擎</title>
    <link href="/2019/07/24/spring-boot-thymeleaf/"/>
    <id>/2019/07/24/spring-boot-thymeleaf/</id>
    <published>2019-07-24T10:16:01.000Z</published>
    <updated>2019-09-09T15:48:02.379Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:heading {"level":3} --><h3>1.模板 引擎简介 ：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>模板引擎将页面和数据进行分离，简化开发过程，主流模板引擎：Thymeleaf、&nbsp;FreeMarker、Velocity、Groovy、Mustache 、JSP 、Beetl</p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>Thymeleaf</strong>: <strong>优点</strong>，主要集中在：模板即原型，前后端分离。<strong>缺点</strong>：模板必须符合xml规范，速度偏慢。适用于个人独立开发</p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>小结</strong>：工作中FreeMarker用的较多，前瞻学习Beetl。现在前端框架例如Bootstrap、Vue较为流行。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>2.Thymeleaf依赖引入</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>(1)在pom.xml 配置文件中添加以下代码引入thymeleaf:</h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>&lt;dependency>            &lt;groupId>org.springframework.boot&lt;/groupId>            &lt;artifactId>spring-boot-starter-thymeleaf&lt;/artifactId>        &lt;/dependency></code></pre><!-- /wp:code --><!-- wp:paragraph --><p>(2)在html中引入thymeleaf命名空间，如下所示：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>&lt;html xmlns:th="http://www.thymeleaf.org" ></code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>3.Thymeleaf 语法</h3><!-- /wp:heading --><!-- wp:paragraph --><p>1.常用语法简单介绍</p><!-- /wp:paragraph --><!-- wp:list --><ul><li>#{}  主要读取常量,例如读取配置文件中的 数据</li><li>${}  主要读取变量，程序中创建的，灵活改变的量</li><li>@{}  主要和路径有关系，比如在th:href="@{****}"中的使用</li></ul><!-- /wp:list --><!-- wp:paragraph --><p>2.更多语法详请参考<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html" target="_blank" rel="noopener">官方文档</a></p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>4.Thymeleaf的使用：</h3><!-- /wp:heading --><!-- wp:paragraph --><p>1.前端</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>&lt;tr th:each="book : ${books}">                        &lt;td th:text="${book.id}">&lt;/td>                        &lt;td th:text="${book.name}">&lt;/td>                        &lt;td th:text="${book.author}">&lt;/td>                        &lt;td th:text="${book.price}">&lt;/td>                        &lt;td>                            &lt;a th:href="@{'/book/predit/'+${book.id}}" >&lt;button class="btn btn-sm btn-primary">编辑&lt;/button>&lt;/a>                          &lt;a th:href="@{'/book/del/'+${book.id}}" >&lt;button class="btn btn-sm btn-danger" >删除&lt;/button>&lt;/a>                        &lt;/td>&lt;/tr></code></pre><!-- /wp:code --><!-- wp:paragraph --><p>2.后端</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>@Controllerpublic class bookController {    @Autowired    private BookDao bookDao;    RendDao rendDao;    @RequestMapping("/book")   public String queryAll(Model model){        List&lt;Book> books =bookDao.selectAll();        model.addAttribute("books" ,books);        return "booklist";    }</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>booklist.html 在templates下，我只需在返回中输入"booklist" Thymeleaf会自动渲染出 booklist.html 。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p></p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      模板引擎将页面和数据进行分离，简化开发过程，主流模板引擎：Thymeleaf、 FreeMarker、Velocity、Groovy、Mustache 、JSP 、Beetl
    
    </summary>
    
    
      <category term="Java" scheme="/categories/Java/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 日志配置</title>
    <link href="/2019/07/23/spring-boot-logs/"/>
    <id>/2019/07/23/spring-boot-logs/</id>
    <published>2019-07-23T10:16:01.000Z</published>
    <updated>2019-09-09T15:47:42.630Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:heading {"level":3} --><h3>1.日志文件</h3><!-- /wp:heading --><!-- wp:list --><ul><li>Spring Boot 日志级别：Debug-&gt;INFO-&gt;WARN-&gt;ERROR</li><li> Spring Boot  默认日志级别：INFO</li></ul><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>2.控制台输出级别控制</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>（1）application.properties 中配置：ROOT代表默认全局设置</h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>logging.level.ROOT=INFO        //默认输出INFO以上包括INFO级别的日志</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>（2）application.properties中配置： 单独控制包的日志输出级别 </h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>logging.level.org.apache=ERROR  //只有EEEOR信息才会输出到控制台</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>3.将日志写到指定文件</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>（1）在 application.properties 设置日志文件目录：</h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>logging.file=F:/logs/document.log</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>（2）使用logback.xml自定义日志文件输出 </h4><!-- /wp:heading --><!-- wp:paragraph --><p>logback.xml和application.properties在同一个目录下</p><!-- /wp:paragraph --><!-- wp:code --><pre><code> &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &amp;lt;configuration  scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;    &amp;lt;contextName&gt;projectName&amp;lt;/contextName&gt;    &amp;lt;property name=&quot;contextName&quot; value=&quot;projectName&quot; /&gt;    &amp;lt;property name=&quot;log_dir&quot; value=&quot;./logs/&quot; /&gt;    &amp;lt;!--输出到控制台--&gt;    &amp;lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;        &amp;lt;!-- 级别过滤器。如果日志级别低于WARN，将被过滤掉。 ALL TRACE DEBUG INFO WARN ERROR--&gt;        &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;            &amp;lt;level&gt;DEBUG&amp;lt;/level&gt;        &amp;lt;/filter&gt;        &amp;lt;encoder&gt;            &amp;lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %msg - %file:%line%n&amp;lt;/pattern&gt;            &amp;lt;charset&gt;UTF-8&amp;lt;/charset&gt;        &amp;lt;/encoder&gt;    &amp;lt;/appender&gt;    &amp;lt;!-- 每天记录info级别日志文件 --&gt;    &amp;lt;appender name=&quot;InfoRollingFileAppender&quot;        class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &amp;lt;Prudent&gt;true&amp;lt;/Prudent&gt;        &amp;lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;            &amp;lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss} %-5level %msg - %file:%line%n&amp;lt;/Pattern&gt;        &amp;lt;/layout&gt;        &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &amp;lt;FileNamePattern&gt;${log_dir}/${contextName}_info%d{yyyy-MM-dd}.log            &amp;lt;/FileNamePattern&gt;        &amp;lt;/rollingPolicy&gt;        &amp;lt;!-- 级别过滤器。如果日志级别低于WARN，将被过滤掉。ALL TRACE DEBUG INFO WARN ERROR--&gt;        &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;            &amp;lt;level&gt;INFO&amp;lt;/level&gt;        &amp;lt;/filter&gt;        &amp;lt;!-- 除了DEBUG级别的日志，其它什么级别的日志都不要 --&gt;        &amp;lt;!-- &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;            &amp;lt;level&gt;DEBUG&amp;lt;/level&gt;            &amp;lt;level&gt;INFO&amp;lt;/level&gt;            &amp;lt;onMatch&gt;ACCEPT&amp;lt;/onMatch&gt;            &amp;lt;onMismatch&gt;DENY &amp;lt;/onMismatch&gt;        &amp;lt;/filter&gt; --&gt;    &amp;lt;/appender&gt;    &amp;lt;!-- 每天记录ERROR级别日志文件 --&gt;    &amp;lt;appender name=&quot;ErrorRollingFileAppender&quot;        class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &amp;lt;Prudent&gt;true&amp;lt;/Prudent&gt;        &amp;lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;            &amp;lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss} %-5level %msg - %file:%line%n&amp;lt;/Pattern&gt;        &amp;lt;/layout&gt;        &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &amp;lt;FileNamePattern&gt;${log_dir}/${contextName}_error%d{yyyy-MM-dd}.log            &amp;lt;/FileNamePattern&gt;        &amp;lt;/rollingPolicy&gt;        &amp;lt;!-- 级别过滤器。如果日志级别低于WARN，将被过滤掉。 --&gt;        &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;            &amp;lt;level&gt;ERROR&amp;lt;/level&gt;        &amp;lt;/filter&gt;        &amp;lt;!-- 除了DEBUG级别的日志，其它什么级别的日志都不要 --&gt;        &amp;lt;!-- &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;            &amp;lt;level&gt;DEBUG&amp;lt;/level&gt;            &amp;lt;level&gt;INFO&amp;lt;/level&gt;            &amp;lt;onMatch&gt;ACCEPT&amp;lt;/onMatch&gt;            &amp;lt;onMismatch&gt;DENY &amp;lt;/onMismatch&gt;        &amp;lt;/filter&gt; --&gt;    &amp;lt;/appender&gt;    &amp;lt;root&gt;        &amp;lt;appender-ref ref=&quot;console&quot; /&gt;        &amp;lt;appender-ref ref=&quot;InfoRollingFileAppender&quot; /&gt;        &amp;lt;appender-ref ref=&quot;ErrorRollingFileAppender&quot; /&gt;    &amp;lt;/root&gt; &amp;lt;/configuration&gt;</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">使用logback.xml，上面  properties 中日志配置将全部失效</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      Spring Boot日志文件可以在服务遇到问题时可以根据日志文件快速定位问题所在，解决问题。1.Spring Boot 日志级别：Debug-&gt;INFO-&gt;WARN-&gt;ERROR 2. Spring Boot 默认日志级别：INFO
    
    </summary>
    
    
      <category term="Java" scheme="/categories/Java/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Win10安装Hexo</title>
    <link href="/2019/07/18/win10-install-hexo/"/>
    <id>/2019/07/18/win10-install-hexo/</id>
    <published>2019-07-18T02:16:01.000Z</published>
    <updated>2019-09-09T15:53:00.194Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:list --><ul><li> 很多人想要使用Hexo+Github搭建自己的博客，但是没有什么计算机基础，并且网上很多教程不完整。导致他们不知道 Win10安装Hexo 的方法，那么接下来就给大家带来完整的 Windows安装Hexo 图文教程，即使是小白也能很快搭建自己的博客。 </li></ul><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>安装流程介绍：</h3><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>没有Github账号需要先注册Github账号</li><li>安装Git</li><li>下载安装Nodejs</li><li>安装Hexo</li><li>SSH相关配置</li><li>将博客部署到Github</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>Step 1：安装Git工具</h3><!-- /wp:heading --><!-- wp:paragraph --><p>  为什么先推荐安装Git呢？因为下载速度很慢，我当时也下载了很长时间。点击<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git官网</a>下载对应的版本，win10一般都是64位。下载完成后安装的时候按照默认提示直接next即可。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 2：注册Github账号</h3><!-- /wp:heading --><!-- wp:paragraph --><p>  本教程主要针对新手，所以大多数人可能并没有注册Github账号，所以需要注册一个Github账号，记得注册的时候用户名要想好，后面访问博客的地址和这个有直接关系，点击进入<a href="https://github.com/" target="_blank" rel="noopener">Github官网</a>，开始注册。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 3：下载配置Nodejs</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>下载Nodejs</h4><!-- /wp:heading --><!-- wp:paragraph --><p>  Hexo主要依赖于Nodejs环境，所以这个必不可少。直接进入<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Nodejs官网</a>，下载压缩包，下载完成后解压到一个指定的目录，这个目录必须记住，因为后面需要配置环境变量，需要用到Nodejs目录路径。</p><!-- /wp:paragraph --><!-- wp:image {"id":228,"width":580,"height":299} --><figure class="wp-block-image is-resized"><img src="http://39.105.173.178/wp-content/uploads/2019/07/node01-1024x528.png" alt class="wp-image-228" width="580" height="299"><figcaption>这是我的Nodejs解压以后放到了E盘下面，并且重命名为node</figcaption></figure><!-- /wp:image --><!-- wp:heading {"level":4} --><h4>配置Nodejs环境变量</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在我的电脑或者文件管理器，右键-&gt;属性</p><!-- /wp:paragraph --><!-- wp:image {"id":229} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/07/node02-1024x556.png" alt class="wp-image-229"></figure><!-- /wp:image --><!-- wp:paragraph --><p>会进入下面的界面：</p><!-- /wp:paragraph --><!-- wp:image {"id":230} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/07/node03-1024x540.png" alt class="wp-image-230"></figure><!-- /wp:image --><!-- wp:paragraph --><p>点击高级系统设置:</p><!-- /wp:paragraph --><!-- wp:image {"id":231} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/07/node04.png" alt class="wp-image-231"></figure><!-- /wp:image --><!-- wp:paragraph --><p>点击环境变量：</p><!-- /wp:paragraph --><!-- wp:image {"id":232} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/07/node05.png" alt class="wp-image-232"></figure><!-- /wp:image --><!-- wp:paragraph --><p>在系统环境变量中找到path，点击编辑：</p><!-- /wp:paragraph --><!-- wp:image {"id":233} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/07/node06.png" alt class="wp-image-233"></figure><!-- /wp:image --><!-- wp:paragraph --><p>点击新建，并且加上上面所示的路径，也就是我们的Nodejs的路径，然后一直确定，大概需要确定三次。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p> Git安装完成，在任意位置，比如桌面，单击鼠标右键，点击Git Brash Here，依次执行：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>node -vnpm -v</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>如果出现对应版本则表示安装成功</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step :4：安装Hexo</h3><!-- /wp:heading --><!-- wp:paragraph --><p>在Git Brash 执行如下命令：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>npm install -g hexo</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>等待安装完成后 ,再次进入到系统环境变量配置：</p><!-- /wp:paragraph --><!-- wp:image {"id":233} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/07/node06.png" alt class="wp-image-233"></figure><!-- /wp:image --><!-- wp:paragraph --><p>添加图上所标示的下一个路径：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>E:\node\node_modules\hexo\bin</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>不过需要根据你的实际情况修改一下：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>你的Nodejs路径\node_modules\hexo\bin</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>添加完成后依次确定保存配置退出</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>在Git Brash 里面 输入 </p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo -v</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>出现对应的版本说明则表示安装配置成功</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>在我电脑任意磁盘位置新建一个文件夹，名字随意，这个是作为你的博客根目录，比如我的:Blog,新建完成选中Blog，单击鼠标右键，Git Brash Here,执行如下代码</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo init</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>等待下载完成后，输入 </p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo s --debug -p 8888</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>在你的浏览器输入：localhost:8888 就可以在本地看到你的博客</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 5：SSH配置</h3><!-- /wp:heading --><!-- wp:paragraph --><p>因为我们需要部署到你的github仓库，每次更改都要deploy ，如果不配置ssh key 每次你都需要输入github 账号密码，如果你觉得无所谓或者麻烦也可以跳过此步骤。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>在Git Brash 中 依次输入：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>git config --global user.name yournamegit config --global user.email youremail</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"cyan-bluish-gray"} --><p class="has-text-color has-cyan-bluish-gray-color">上面的yourname 和 youremail分别指你的github用户名以及github绑定的邮箱</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>然后再执行如下行命令生成密匙和公匙：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>ssh-keygen -t rsa -C "email"</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>执行了这个命令会提示存储路径和密码以及确认密码：你连续按三次Enter就好，然后执行如下命令打开公匙文件：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>vim /c/Users/73778/.ssh/id_rsa.pub</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>这个路径你可以在上面的提示里面复制，这是默认地址，不同电脑不一样，你就复制它提示的路径：</p><!-- /wp:paragraph --><!-- wp:image {"id":235} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/07/ssh01.png" alt class="wp-image-235"></figure><!-- /wp:image --><!-- wp:paragraph --><p>打开后复制里面的内容：（下面很多数据均来自我的另一个教程<a href="http://39.105.173.178/install-hexo-on-linux/" target="_blank" rel="noopener">【 Linux安装Hexo 】</a>，这些步骤是一样的）</p><!-- /wp:paragraph --><!-- wp:image {"id":107} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/06/图片3-1024x525.png" alt class="wp-image-107"></figure><!-- /wp:image --><!-- wp:paragraph --><p>然后到你的github主页点击右上角头像，setting -&gt; SSH and GPG keys，新建SSH key</p><!-- /wp:paragraph --><!-- wp:image {"id":105} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/06/图片5-1024x503.png" alt class="wp-image-105"></figure><!-- /wp:image --><!-- wp:paragraph --><p>上面名字随意，下面把刚才复制的公匙内容复制进去，添加SSH key。完成以后，执行以下代码：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>ssh -T git@github.com</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>会有如下提示：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>The authenticity of host 'github.com (52.74.223.119)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)?</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>输入：yes，会有以下提示：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>Hi yremp2! You've successfully authenticated, but GitHub does not provide shell access.</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>则表示配置成功，就可以下一步操作了。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 6：将博客部署到Github</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>新建仓库</h4><!-- /wp:heading --><!-- wp:paragraph --><p> 在Github主页点击头像，选择 Your repository，然后new 一个新的仓库，注意这个新仓库有特定的格式：你的用户名.github.io，我后面的例子都将使用我的小号yremp2，所以我的仓库名字：yremp2.github.io 。 </p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>修改配置文件</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在你的博客根目录（我的：Blog）下找到 _config.yml， 可以用记事本打开，在最下方找到：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>deploy:  type:</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>修改为：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>deploy:  type: git  repo: git@github.com:yremp2/yremp2.github.io.git </code></pre><!-- /wp:code --><!-- wp:paragraph --><p>repo 就是 yremp2.github.io 这个仓库的地址，如何获取如下：</p><!-- /wp:paragraph --><!-- wp:image {"id":111} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/06/图片6-1024x517.png" alt class="wp-image-111"></figure><!-- /wp:image --><!-- wp:paragraph --><p>注意配置文件里面所有 : 后面都有一个空格，没有会出错</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>开始部署</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在博客根目录Blog下依次执行如下命令：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo cleanhexo ghexo d</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>如果在执行hexo d有如下错误：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>ERROR Deployer not found: git</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>请执行以下命令：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>npm install --save hexo-deployer-git</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>打开浏览器，访问 yremp2.github.io ,这里将请按照 你的github同户名.github.io 输入，就可以访问你的博客啦。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>同时博主还写了以下文章，有兴趣的话可以去参考一下：</p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li><a href="https://yremp.live/linux-install-hexo/" target="_blank" rel="noopener">Linux下安装Hexo</a></li><li><a href="https://yremp.live/hexo-upload/" target="_blank" rel="noopener">Hexo编写上传文章</a></li><li><a href="https://yremp.live/hexo-theme/" target="_blank" rel="noopener">Hexo更换主题</a></li></ol><!-- /wp:list -->]]></content>
    
    <summary type="html">
    
      很多人想要使用Hexo+Github搭建自己的博客，但是没有什么计算机基础，并且网上很多教程不完整。导致他们不知道 Win10安装Hexo 的方法，那么接下来就给大家带来完整的 Windows安装Hexo 图文教程，即使是小白也能很快搭建自己的博客。
    
    </summary>
    
    
      <category term="Hexo" scheme="/categories/Hexo/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Linux 下安装 Hexo</title>
    <link href="/2019/07/17/linux-install-hexo/"/>
    <id>/2019/07/17/linux-install-hexo/</id>
    <published>2019-07-17T02:16:01.000Z</published>
    <updated>2019-09-09T15:56:30.088Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:heading {"level":4} --><h4>注意事项：</h4><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>我使用的系统是deepin 15.10.1桌面版，不同的Linux系统可能存在差异</li><li>下面教程中很多细节，比如文件路径、github用户名等请根据实际情况修改</li><li>红色字体部分对应的是Linux服务器部署Hexo教程，请根据情况参考教程</li><li>本教程主要写给刚入门的小白，大佬请随意，不喜勿喷，如果发现错误，请留言指正</li></ol><!-- /wp:list --><!-- wp:heading {"level":3} --><h3>Step 1 ：安装 Git</h3><!-- /wp:heading --><!-- wp:paragraph --><p>可以</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>apt-get install git</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>或者</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>yum install git</code></pre><!-- /wp:code --><!-- wp:heading {"level":3} --><h3>Step 2 ：安装NodeJs</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>下载压缩包</h4><!-- /wp:heading --><!-- wp:paragraph --><p>我并没有使用命令行安装，而是去NodeJs官网下载的压缩包，<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网下载地址</a>  ，打开下载10.16.0 Linux版本的NodeJs。</p><!-- /wp:paragraph --><!-- wp:image {"id":106} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/06/图片1-1024x339.png" alt class="wp-image-106"></figure><!-- /wp:image --><!-- wp:heading {"level":4} --><h4>解压缩和重命名</h4><!-- /wp:heading --><!-- wp:paragraph --><p>下载完成后，解压到指定的目录下，并且重命名为node，本人的保存的路径为 /home/yremp/node,前面home是根目录下的，yremp是我deepin系统中用户名，后面请根据 实际情况输入路径。</p><!-- /wp:paragraph --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">如果使用的Linux服务器，（如果对Linux指令不是很熟悉）可以使用ftp工具，例如FlashFXP 5、MobaXterm等连接服务器，可以先解压缩再将解压后的Nodejs文件夹上传到指定目录，也可以先上传压缩包到指定目录，在压缩包所在目录下执行解压缩命令：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>tar -zxvf node-v11.0.0.tar.gz</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">解压缩完成以后再将解压好的文件夹node-v11.0.0重命名为node（个人强迫症），可以不修改。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>为node 和 npm命令设置软链接</h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>ln -s /home/yremp/node/bin/node /usr/local/bin/node  ln -s /home/yremp/node/bin/npm /usr/local/bin/npm</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>需要注意的地方：/home/yremp/node/  这里换成你解压缩后路径和修改的名称，后面的路径是固定的不需要修改。完成后依次输入以下命令：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>node -vnpm -v</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>如果出现对应版本号，则说明安装成功。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 3：安装Hexo</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4>安装Hexo</h4><!-- /wp:heading --><!-- wp:paragraph --><p>执行下面的代码：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>npm install hexo -g</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>为hexo命令设置软连接：</h4><!-- /wp:heading --><!-- wp:code --><pre class="wp-block-code"><code>ln -s /home/yremp/node/lib/node_modules/hexo/bin/hexo /usr/local/bin/hexo</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>注意上面命令第二个路径和前面路径之间有空格</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>创建博客根目录</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在任意位置创建博客根目录，你自己找得到就行，我在创建的博客目录为：                         /home/yremp/MyBlog ,和之前的node在一个目录下。                                                        执行如下命令进入博客根目录：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>cd /home/yremp/MyBlog</code></pre><!-- /wp:code --><!-- wp:heading {"level":4} --><h4>初始化：</h4><!-- /wp:heading --><!-- wp:paragraph --><p>执行如下命令初始化博客：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo init</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>执行上面的命令，你会看到它下载很多东西。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>在本地运行</h4><!-- /wp:heading --><!-- wp:paragraph --><p>使用如下命令：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo s --debug -p 8888</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>执行上面的命令以后，打开浏览器输入 localhost:8888 就可以本地查看你的博客了。</p><!-- /wp:paragraph --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">注意，如果使用的是Linux服务器那么可以直接运行进行访问：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo s -p 8888 //前提是这个端口在防火墙中设置为可以访问</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">但是你会发现关闭掉Terminal（终端）后就无法访问，如何解决？我使用Tomcat来运行这个博客项目。在tomcat webspps下新建一个yremp的文件夹，并将hexo g 生生的静态文件放到webapps/yremp下面。 在MyBlog下找到  _config.yml ，修改其中的：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code># Directorysource_dir: sourcepublic_dir: /usr/local/tomcat/webapps/yremp/ //这样配置hexo g静态文件地址tag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">如果你仅仅想打开你的域名就访问你的hexo 博客，那么你需要配置tomcat 的运行端口为80（http），这个这里不细说百度上面都可以找到很详细的教程。 设置完80端口后， 下面说如何默认访问你的博客，按照如下修改静态文件生成地址：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code># Directorysource_dir: sourcepublic_dir: /usr/local/tomcat/webapps/ROOT //tomcat默认访问的项目tag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">修改完配置文件后，你需要先清空/tomcat/webapps/ROOT 这个文件夹，然后执行：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo g</code></pre><!-- /wp:code --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">就算是大功告成，输入域名就可以访问你的博客啦</p><!-- /wp:paragraph --><!-- wp:paragraph {"textColor":"vivid-red"} --><p class="has-text-color has-vivid-red-color">Linux服务器配置Hexo就算完成啦，我的Hexo放在服务器地址：<a href="http://www.yremp.live:1234/yremp/" target="_blank" rel="noopener">点击访问</a></p><!-- /wp:paragraph --><!-- wp:paragraph {"textColor":"vivid-green-cyan"} --><p class="has-text-color has-vivid-green-cyan-color">下面是在Linux环境下使用hexo部署到github的教程，需要的小伙伴可以继续阅读</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Step 4 ：部署到Github</h3><!-- /wp:heading --><!-- wp:heading {"level":4} --><h4> 注册Github账号</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在Github官网注册账号，请记住自己的Github绑定的邮箱以及Github用户名后面会用到，已有账号的话就不需要注册了。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>新建一个仓库用于存放博客</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在Github主页点击头像，选择 Your repository，然后new 一个新的仓库，注意这个新仓库有特定的格式：你的用户名.github.io，我后面的例子都将使用我的小号yremp2，所以我的仓库名字：yremp2.github.io 。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>配置ssh key</h4><!-- /wp:heading --><!-- wp:paragraph --><p>使用ssh key可以在每次提交新的 hexo deploy 指令时不用输入你的用户名和密码，非常的方便。首先在终端输入一下指令配置用户名和邮箱:</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>git config --global user.name "yremp2"git config --global user.email "762358691@qq.com"</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>然后输入以下指令生成密匙：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>ssh-keygen -t rsa -C "762358691@qq.com" </code></pre><!-- /wp:code --><!-- wp:paragraph --><p>然后它会提示你输入密码和确认密码，按两次回车就行，然后会有包含下面：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>的提示以及一个图形，这时候你可以 使用：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>vim /root/.ssh/id_rsa.pub</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>打开这个公匙：大致如下：</p><!-- /wp:paragraph --><!-- wp:image {"id":107} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/06/图片3-1024x525.png" alt class="wp-image-107"></figure><!-- /wp:image --><!-- wp:paragraph --><p>如果复制不了，可以在文件管理器中找到这个文件 路径 /root/.ssh/</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>可以看到文件夹下有几个文件，我们需要打开id_rsa.pub，复制其中的内容：</p><!-- /wp:paragraph --><!-- wp:image {"id":109} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/06/图片4.png" alt class="wp-image-109"></figure><!-- /wp:image --><!-- wp:paragraph --><p>然后到你的github主页，setting -&gt; SSH and GPG keys，新建SSH key</p><!-- /wp:paragraph --><!-- wp:image {"id":105} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/06/图片5-1024x503.png" alt class="wp-image-105"></figure><!-- /wp:image --><!-- wp:paragraph --><p>上面名字随意，下面把刚才复制的公匙内容复制进去，添加SSH key。完成以后，执行以下代码：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>ssh -T git@github.com</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>会有如下提示：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>The authenticity of host 'github.com (52.74.223.119)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)?</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>输入：yes，会有以下提示：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>Hi yremp2! You've successfully authenticated, but GitHub does not provide shell access.</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>则表示配置成功，就可以下一步操作了。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>修改配置文件</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在博客根目录MyBlog下找到 _config.yml，可以使用vim命令：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>vim /home/yremp/MyBlog/_config.yml</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>打开这个配置文件，也可以在文件管理器找到找个文件直接打开，</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>在这个文件最下方，可以找到：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>deploy:  type:</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>我们需要修改这一部分为:</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>deploy:  type: git  repo: git@github.com:yremp2/yremp2.github.io.git </code></pre><!-- /wp:code --><!-- wp:paragraph --><p>repo 就是 yremp2.github.io 这个仓库的地址，如何获取如下：</p><!-- /wp:paragraph --><!-- wp:image {"id":111} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/06/图片6-1024x517.png" alt class="wp-image-111"></figure><!-- /wp:image --><!-- wp:heading {"level":4} --><h4>部署到Github</h4><!-- /wp:heading --><!-- wp:paragraph --><p>在博客根目录MyBlog下依次执行如下命令：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>hexo cleanhexo ghexo d</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>如果在执行hexo d有如下错误：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>ERROR Deployer not found: git</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>请执行以下命令：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>npm install --save hexo-deployer-git</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>然后继续 执行 hexo d ，完成后打开浏览器输入 yremp2.github.io 就可以访问我们的博客啦，你们就输入你的  Github用户名.github.io 就可以访问你们的网站。</p><!-- /wp:paragraph --><!-- wp:image {"id":110} --><figure class="wp-block-image"><img src="http://39.105.173.178/wp-content/uploads/2019/06/图片7-1024x510.png" alt class="wp-image-110"></figure><!-- /wp:image --><!-- wp:paragraph --><p>以上便是我给大家带来的全部教程，有什么问题欢迎在评论区留言或者联系我。</p><!-- /wp:paragraph -->]]></content>
    
    <summary type="html">
    
      Linux(deepin) 下安装 Hexo:我使用的系统是deepin 15.10.1桌面版，不同的Linux系统可能存在差异下面教程中很多细节，比如文件路径、github用户名等请根据实际情况修改。
    
    </summary>
    
    
      <category term="Hexo" scheme="/categories/Hexo/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
</feed>
